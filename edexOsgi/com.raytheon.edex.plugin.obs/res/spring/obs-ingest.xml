<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:amq="http://activemq.apache.org/schema/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd   
  http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

	<bean id="obsDecoder" class="com.raytheon.edex.plugin.obs.ObsDecoder">
        <constructor-arg ref="obsPluginName" />
    </bean>
    
    <bean id="metarPointData" class="com.raytheon.edex.plugin.obs.metar.MetarPointDataTransform"/>
    	
	<bean id="obsSeparator" class="com.raytheon.edex.plugin.obs.metar.MetarSeparator" />

	<bean id="obsDistRegistry" factory-bean="distributionSrv"
		factory-method="register">
		<constructor-arg value="obs" />
		<constructor-arg value="jms-dist:queue:Ingest.obs?destinationResolver=#qpidDurableResolver" />
	</bean>

    <bean id="obsCamelRegistered" factory-bean="contextManager"
		factory-method="register" 
		depends-on="persistCamelRegistered, 
		            shefCamelRegistered,
		            metarToHMDBCamelRegistered">
		<constructor-arg ref="obs-camel"/>
  	</bean>

	<camelContext id="obs-camel"
		xmlns="http://camel.apache.org/schema/spring"
		errorHandlerRef="errorHandler"
		autoStartup="false">
		<!--
		<endpoint id="metarFileEndpoint" uri="file:${edex.home}/data/sbn/metar?noop=true&amp;idempotent=false" />

		<route id="metarFileConsumerRoute">
			<from ref="metarFileEndpoint" />
			<bean ref="fileToString" />
			<setHeader headerName="pluginName">
				<constant>obs</constant>
			</setHeader>
			<to uri="jms-generic:queue:Ingest.obs" />
		</route>
	    -->

		<!-- Begin METAR routes -->
 		<route id="metarIngestRoute">
			<from uri="jms-generic:queue:Ingest.obs?destinationResolver=#qpidDurableResolver" />
			<setHeader headerName="pluginName">
				<constant>obs</constant>
			</setHeader>
			<doTry>
				<pipeline>
					<bean ref="stringToFile" />
					<bean ref="obsDecoder" method="decode" />
					<bean ref="metarPointData" method="toPointData" />
					<multicast>
						<to uri="direct-vm:persistIndexAlert" />
						<to uri="direct-vm:metarToShef" />
						<to uri="direct-vm:metarToHMDB"/> 
					</multicast>
				</pipeline>
				<doCatch>
					<exception>java.lang.Throwable</exception>
					<to uri="log:metar?level=ERROR&amp;showBody=false&amp;showCaughtException=true&amp;showStackTrace=true"/>
				</doCatch>
			</doTry>
		</route>
	</camelContext>
</beans>