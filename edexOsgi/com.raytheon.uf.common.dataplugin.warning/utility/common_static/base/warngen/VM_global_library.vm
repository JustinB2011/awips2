##### MERGED 12.12 1//7/13 BY EVAN BOOKBINDER
#####         Qinglu Lin    04-04-2012 DR 14691.
#####         Qinglu Lin    06-18-2012 DR 15043. Use duration in secondBullet. (crosses new day)
#####         Qinglu Lin    08-13-2012 DR 14493. Use corToNewMarker and corEventtime. 
#####    Evan Bookbinder    09-12-2012 Corrected syntax errors in mmarkers and tml functions.
#####                                  Removed lock tags (will be handled by J Sanchez)
#####                                  Altered areaFormat macro to prevent extra blank spaces
#####         D. Friedman   11-09-2012 DR 15430. Rework included watches.
#####    Evan Bookbinder    02-06-2013 Added WrapText macro to handle customization of indents
#####                                  like the ~ and % characters in A1.
#####    Evan Bookbinder    05-05-2013 handleClosesPoints and 3rd bullet changes (OVER & now) 
#####    Evan Bookbinder    09-20-2013 Fixed rural area otherPoints in pathcast section, added rural phrase
#####         Qinglu Lin    03-17-2014 DR 16309. Updated inserttorwatches and insertsvrwatches. 
#####         Qinglu Lin    05-21-2014 DR 16309. Updated inserttorwatches and insertsvrwatches by changing 'FOR##' to 'FOR ##'.
#####         D. Friedman   08-28-2014 ASM #15658.  Add marine watch wording.
#####         Qinglu Lin    09-15-2014 ASM #15551. Overhauled inserttorwatches and insertsvrwatches, added until.
#####         Qinglu Lin    10-06-2014 ASN #556.   Updated secondBullet.
#####    Evan Bookbinder    10-24-2014 Fixed UGC > 500 check for Indep Cities in svrl macros to ignore zone codes
####################################################################################################
#*
Mile Marker Test Code                                     
macro "mmarkers" use (called out of VM_global_library.vm):

#mmarkers($name, $id, $type, $markers, $simplify)
where:
$markers is a string, and is the exact "variable" set in the XML "pointSource" tag for this road
         - <pointSource variable="i70momm">
$id is a sequential field from the $markers database table
$name is a string lead in of the road name (e.g. INTERSTATE 95)
$type is a string which describes the type of "marker" (e.g. MILE MARKER)
         - may be "MILE MARKER" or something similar, or blank ""
         - "" is for use when town names (CHARLESTON) or exit names (THE SUNSET EXIT)
$simplify is a boolean value (true or false) 
         - true concatenates (FROM MM 2 to 4), 
         - false is a big list (MM 2...3...AND 4)   
###################################################################################################
*#

### AUTHORS: EVAN BOOKBINDER & MIKE DANGELO
### PURPOSE: OUTPUT MILE MARKER, ROAD, INTERSECTION INFO
#macro(mmarkers $markers $id $name $type $simplify)
#set($size = ${list.size($markers)})
#if(${type.length()} > 0) 
#set($singType = "${type} ")
#set($plurType = "${type}S ")
#else
#set($singType = "")
#set($plurType = "")
#end
#set($startMarker = "")
#set($endMarker = "")
#set($counter = 0)
#set($phraseCount = 0)
#set($intIndex = 0)
#if($size > 0)
${name} ##
#if($simplify)
#foreach($index in $id)
#set($intIndex = $intIndex.parseInt($index.name))
#if($counter == 0)
#set($startIdx = $intIndex)
#set($endIdx = $intIndex)
#set($startCounter = $counter)
#set($endCounter = $counter)
## Only one item in the list and it's the first item
#if($size == 1)
## GET MARKER @ 0 index
NEAR ${singType}${list.get(${markers},0).name}.
#end
##Continuation of current segment		
#elseif(($intIndex - $endIdx) == 1 && (${counter} + 1 != ${size}))
#set($endIdx = $intIndex)
#set($endCounter = $counter)
##We've found a break and we're not on the last item
#elseif(${counter} + 1 != ${size})
#set($marker1 = ${list.get(${markers},${startCounter}).name})
#set($marker2 = ${list.get(${markers},${endCounter}).name})
#if(${startCounter} == ${endCounter})
NEAR ${singType}${marker1}...##
#else
BETWEEN ${plurType}${marker1} AND ${marker2}...##
#end
#set($phraseCount = $phraseCount + 1)
#set($startIdx = $intIndex)
#set($endIdx = $intIndex)
#set($startCounter = $counter)
#set($endCounter = $counter)
## LAST ITEM
#else
#if($phraseCount > 0)
AND ##
#end
##Continuous range (e.g. 1,2,3,4)
#if(($intIndex - $endIdx) == 1)
#set($marker1 = ${list.get(${markers},${startCounter}).name})
#set($marker2 = ${list.get(${markers},${counter}).name})
BETWEEN ${plurType}${marker1} AND ${marker2}.
##Isolated mile marker previous and current (e.g. 1,4)
#elseif($startIdx == $endIdx)
#set($marker1 = ${list.get(${markers},${startCounter}).name})
#set($marker2 = ${list.get(${markers},${counter}).name})
${singType}${marker1} AND NEAR ${singType}${marker2}.
##Continuous range + isolated milemarker at end (e.g. 1,2,3,6)
#else
#set($marker1 = ${list.get(${markers},${startCounter}).name})
#set($marker2 = ${list.get(${markers},${endCounter}).name})
#set($marker3 = ${list.get(${markers},${counter}).name})
BETWEEN ${plurType}${marker1} AND ${marker2}...AND NEAR ${singType}${marker3}.	
#end
#end
#set($counter = $counter + 1)
#end
#else
NEAR ${plurType}##
#foreach($item in $markers)
#set($counter = $counter + 1)
#if($size > 1 && $counter == $size)
AND ${item.name}.
#elseif($size == 1 && $counter == $size)
${item.name}.
#else
${item.name}...##
#end
#end
#end
#end
#end
########END MACRO

### POINT MARKERS - VARIANCE OF MMARKERS BY EVAN BOOKBINDER & MIKE DANGELO
### see pointMarkers.vm for details 
### AUTHORS: MIKE DANGELO AND DAVE TOMALAK 
### PURPOSE: OUTPUT IMPORTANT LOCATIONS/LARGE VENUES
#macro(pmarkers $markers $id $name $type $column)
#set($size = ${list.size($markers)})
#set($lastEntry = ${size} - 1)
#set($firstPoint = ${list.get($markers, 0).name})
#set($lastPoint = ${list.get($markers, $lastEntry).name})
#if(${type.length()} > 0) 
#set($singType = "${type} ")
#set($plurType = "${type}S ")
#else
#set($singType = "")
#set($plurType = "")
#end
#if(${size} == 1)
${firstPoint}.
#end
#if(${size} == 2)
${firstPoint} AND ${lastPoint}.
#end
#if(${size} > 2)
#set($counter = 0)
${name} ${plurType}
#foreach($item in ${markers})
#set($counter= ${counter} + 1)
#if($column)
#if (${counter} == ${size})
AND ${lastPoint}.
#else
${item.name}...
#end
#else
#if (${counter} == ${size})
AND ${item.name}.
#else
${item.name}...##
#end
#end
#end
#end
#end 
################# END OF POINT MARKERS MACRO

#macro(drainages $riverdrainages)
#set($size = ${list.size($riverdrainages)})
#if($size > 0)
#set($count = 0)
THIS INCLUDES THE FOLLOWING STREAMS AND DRAINAGES...##
#foreach (${drainage} in ${riverdrainages})
${drainage.name}##
#set($count = $count + 1)
#if($count == $size - 1)
 AND ##
#elseif($count < $size)
...##
#end
#end
.

#end
#end
########END MACRO

#macro(inserttorwatches $watches $list $secondtimezone $dateUtil $timeFormat)
#set($tornadoWatches = [])
#set($ALSO = "")

#foreach(${watch} in ${watches})
#if(${watch.getPhenSig()} == 'TO.A')
#set($success = $tornadoWatches.add($watch))
#end
#end

#set($etns = [])
#set($lastTime = "")
#set($currTime = "")
#set($lastEtn = "")
#set($count = 0)
#foreach(${watch} in ${tornadoWatches})
#set($success = $etns.add(${watch.etn}))
#end
#foreach(${watch} in ${tornadoWatches})
#set($count = $count + 1)
#if(${lastEtn} != "" && ${watch.etn} != ${lastEtn})
. ##
#end
#set($endTime = ${watch.endTime})
#if(${watch.etn} != ${lastEtn})
#set($lastTime = "#until(${endTime}, ${timeFormat}, ${secondtimezone}, ${watch})")
A TORNADO WATCH${ALSO} REMAINS IN EFFECT ${lastTime}##
#set($ALSO = " ALSO")
#else
#if(!$foreach.hasNext() || ${watch.etn} != $etns.get(${count}))
 AND ##
#else
...##
#end
#set($currTime = "#until(${endTime}, ${timeFormat}, ${secondtimezone}, ${watch})")
#if(${currTime} != ${lastTime})
${currTime}##
#set($lastTime = ${currTime})
#end
#end
#if(!${watch.marineArea})
#areaFormat(${watch.partOfState} true false true)${watch.state}##
#else
#formatMarineArea(${watch.marineArea})
#end
#set($lastEtn = ${watch.etn})
#end
#if(${lastEtn} != "")
.
#end
#end
########END MACRO

#macro(until $endTime $timeFormat $secondtimezone $watch)
UNTIL ${dateUtil.formatUseNoonMidnight(${endTime}, ${timeFormat.clock}, 15, ${localtimezone})}##
#if(${secondtimezone})
/${dateUtil.formatUseNoonMidnight(${watch.getEndTime()}, ${timeFormat.clock}, 15, ${secondtimezone})}/##
#end
 FOR ##
#end

#macro(insertsvrwatches $watches $list $secondtimezone $dateUtil $timeFormat)
#set($svrWatches = [])
#set($ALSO = "")

#foreach(${watch} in ${watches})
#if(${watch.getPhenSig()} == 'SV.A')
#set($success = $svrWatches.add($watch))
#end
#end

#set($etns = [])
#set($lastTime = "")
#set($currTime = "")
#set($lastEtn = "")
#set($count = 0)
#foreach(${watch} in ${svrWatches})
#set($success = $etns.add(${watch.etn}))
#end
#foreach(${watch} in ${svrWatches})
#set($count = $count + 1)
#if(${lastEtn} != "" && ${watch.etn} != ${lastEtn})
. ##
#end
#set($endTime = ${watch.endTime})
#if(${watch.etn} != ${lastEtn})
#set($lastTime = "#until(${endTime}, ${timeFormat}, ${secondtimezone}, ${watch})")
A SEVERE THUNDERSTORM WATCH${ALSO} REMAINS IN EFFECT ${lastTime}##
#set($ALSO = " ALSO")
#else
#if(!$foreach.hasNext() || ${watch.etn} != $etns.get(${count}))
 AND ##
#else
...##
#end
#set($currTime = "#until(${endTime}, ${timeFormat}, ${secondtimezone}, ${watch})")
#if(${currTime} != ${lastTime})
${currTime}##
#set($lastTime = ${currTime})
#end
#end
#if(!${watch.marineArea})
#areaFormat(${watch.partOfState} true false true)${watch.state}##
#else
#formatMarineArea(${watch.marineArea})
#end
#set($lastEtn = ${watch.etn})
#end
#if(${lastEtn} != "")
.
#end
#end
########END MACRO

#macro(formatMarineArea $marineArea)
${marineArea}##
#end
########END MACRO

#macro(printcoords $coordinates $list)
#set($count = 0)
LAT...LON ##
#foreach(${coord} in ${coordinates})
#if($count % 4 == 0 && $count != 0)

      ##
#end
#llFormat(${coord.y}) #llFormat(${coord.x})##
#set($count = $count + 1)
#if($count % 4 != 0 && $count != ${list.size($coordinates)})
 ##
#end
#end
#end
########END MACRO

#macro(headline $officeLoc $backupSite)
#headlineext(${officeLoc}, ${backupSite}, false)
#end
########END MACRO

#macro(backupText $backupSite)
#if($backupSite)
ISSUED BY NATIONAL WEATHER SERVICE ${backupSite}
#end
#end
########END MACRO

#macro(headlineext $officeLoc $backupSite $extend)
#if($extend)
#set($issueVar = "EXTENDED THE")
#else
#set($issueVar = "ISSUED A")
#end
THE NATIONAL WEATHER SERVICE IN ${officeLoc} HAS ${issueVar}
#end
########END MACRO

#macro(direction $d)
#if($d==45)
SOUTHWEST##
#elseif($d==90)
WEST##
#elseif($d==135)
NORTHWEST##
#elseif($d==180)
NORTH##
#elseif($d==225)
NORTHEAST##
#elseif($d==270)
EAST##
#elseif($d==315)
SOUTHEAST##
#else
SOUTH##
#end
#end
########END MACRO

#macro(areaFormat $directionSet $useCentral $useExtreme $addSpace)
#set($output = "")
#if(${useExtreme})
#if(${list.contains($directionSet, "EXTREME")})
#set($output = "EXTREME ")
#end 
#end
#if(${list.contains($directionSet, "PA")})
#set($output = "${output}THE PANHANDLE OF")
#end
#if(${list.contains($directionSet, "MI")})
#set($output = "${output}MIDDLE")
#end
#if(${list.contains($directionSet, "PD")})
#set($output = "${output}THE PIEDMONT OF")
#end
#if(${list.contains($directionSet, "UP")})
#set($output = "${output}UPSTATE")
#end
#if(${list.contains($directionSet, "BB")})
#set($output = "${output}BIG BEND")
#end
#if(${list.contains($directionSet, "ER")})
#set($output = "${output}EAST CENTRAL UPPER")
#end
#if(${list.contains($directionSet, "EU")})
#set($output = "${output}EASTERN UPPER")
#end
#if(${list.contains($directionSet, "SR")})
#set($output = "${output}SOUTH CENTRAL UPPER")
#end
#if(${list.contains($directionSet, "NR")})
#set($output = "${output}NORTH CENTRAL UPPER")
#end
#if(${list.contains($directionSet, "WU")})
#set($output = "${output}WESTERN UPPER")
#end
#if(${list.contains($directionSet, "DS")})
#set($output = "${output}DEEP SOUTH")
#end
#if(${list.contains($directionSet, "NORTH")})
#set($output = "${output}NORTH")
#end
#if(${list.contains($directionSet, "SOUTH")})
#set($output = "${output}SOUTH")
#end
#if(${list.contains($directionSet, "EAST")})
#set($output = "${output}EAST")
#end
#if(${list.contains($directionSet, "WEST")})
#set($output = "${output}WEST")
#end
#if(${useCentral} && ${list.contains($directionSet, "CENTRAL")}) 
#if(${list.contains($directionSet, "NORTH")} || ${list.contains($directionSet, "SOUTH")} || ${list.contains($directionSet, "EAST")} || ${list.contains($directionSet, "WEST")})
#set($output = "${output} ")
#end
#set($output = "${output}CENTRAL")
#elseif(${list.contains($directionSet, "NORTH")} || ${list.contains($directionSet, "SOUTH")} || ${list.contains($directionSet, "EAST")} || ${list.contains($directionSet, "WEST")})
#set($output = "${output}ERN")
#end
#if($addSpace && (${output.length()} > 0)) 
#set($output = "${output} ")
#end
$output##
#end
########END MACRO

#macro(llFormat $v)
#set($v100 = $v * 100)
${mathUtil.abs(${mathUtil.round($v100)})}## 
#end
########END MACRO

#macro(tml $time $timeFormat $motdir $motspd $eventlocation )
###set($time = ${now})
#if(${corToNewMarker})
##overload eventTime with global corCreateTime variable
#set($time = ${corCreateTime})
#end
TIME...MOT...LOC ## 
${dateUtil.format(${time}, ${timeFormat.time})}Z ##
${mathUtil.roundAndPad(${motdir})}DEG ##
${mathUtil.round(${motspd})}KT ##
#foreach(${eventCoord} in ${eventLocation})
#llFormat(${eventCoord.y}) #llFormat(${eventCoord.x}) ##
#end
#end
########END MACRO

#macro(handleClosestPoints $list, $points1, $points2, $stormType, $nearText, $nearThreshold, $overText, $overThreshold, $units, $useSecondRef)
#if(${list.size($points1)} > 0)
#if(${stormType} == "line")
#set($used = [])
#set($used1 = [])
#lineOfStorms($used1, $used, $points1, $threshold, $units)
ALONG A LINE EXTENDING FROM #outputLineOfStorms($used1, $nearText, $nearThreshold, $overThreshold, $units)##
#if($points2 && $useSecondRef)
#set($used2 = [])
#lineOfStorms($used2, $used, $points2, $threshold, $units)
#if(${used1.size()} == ${used2.size()})
...OR ALONG A LINE EXTENDING FROM #outputLineOfStorms($used2, $nearText, $nearThreshold, $overThreshold, $units)##
#end
#end
#else
#set($point1 = ${list.get(${points1}, 0)})
#if($points2)
#set($point2 = ${list.get(${points2}, 0)})
#end
#if($point1.roundedDistance <= $overThreshold)
${overText} ##
#elseif($point1.roundedDistance <= $nearThreshold)
${nearText} ##
#else
${point1.roundedDistance} $units #direction(${point1.oppositeRoundedAzimuth}) OF ##
#end
#if(${point1.partOfArea}) 
#set($location = "#areaFormat(${point1.partOfArea} true false false) ${point1.name}")
#set($location = ${location.trim()})
#else
#set($location = "${point1.name}")
#end
${location}##
#if($point2 && $useSecondRef && ${point2.name} != ${point1.name})
#if($point2.roundedDistance <= $overThreshold)
...OR ${overText} ##
#elseif($point2.roundedDistance <= $nearThreshold)
...OR ${nearText} ##
#else
...OR ${point2.roundedDistance} $units #direction(${point2.oppositeRoundedAzimuth}) OF ##
#end
#if(${point2.partOfArea}) 
#set($location = "#areaFormat(${point2.partOfArea} true false false) ${point2.name}")
#set($location = ${location.trim()})
#else
#set($location = "${point2.name}")
#end
${location}##
#end
#end
#else
###NO POINTS FOUND
OVER ${noLocPhrase} OF !** ENTER STORM DOT COUNTY/ZONE PORTION **!
#end
#end
########END MACRO

#macro(lineOfStorms $toUse, $usedList, $line, $nearThreshold, $units)
#foreach(${closestPoints} in ${line})
#set($notfound = true)
#foreach(${closestPoint} in ${closestPoints})
#if(${notfound} && ${usedList.contains(${closestPoint.name})} == false)
#set($notfound = false)
#if(${usedList.add(${closestPoint.name})})
#end
#if(${toUse.add(${closestPoint})})
#end
#end
#end
#end
#end
########END MACRO

#macro(outputLineOfStorms $points, $nearText, $nearThreshold, $overThreshold, $units)
#set($first = "true")
#foreach(${closestPoint} in ${points})
#if(${first} == "true")
#set($first = "false")
#else
 TO ##
#end
#if(${closestPoint.roundedDistance} < ${overThreshold})
${closestPoint.name}##
#elseif(${closestPoint.roundedDistance} < ${nearThreshold})
${nearText} ${closestPoint.name}##
#else
${closestPoint.roundedDistance} ${units} #direction(${closestPoint.oppositeRoundedAzimuth}) OF ${closestPoint.name}##
#end
#end
#end
########END MACRO

##################################################################
##### BEGIN NEW STATEMENT/ADVISORY COUNTY HEADLINE CODE ##########
## AUTHORED BY EVAN BOOKBINDER WFO EAX 8-18-11          ##########
## useCentralxxx = boolean to use the word CENTRAL in the County or State phrase
## useExtremexxx = boolean to use the word EXTREME in the county of State phrase
##################################################################
#macro(headlineLocList $areas $useCentralCounty $useExtremeCounty $useCentralState $useExtremeState)
#### DETERMINE IF WE HAVE A FIPS OR ZONE BASED PRODUCT
#if(${areaSource.equalsIgnoreCase("COUNTY")})
#set($areaFIPS = true)
#else
#set($areaFIPS = false)
#end
#set($countyCount = 0)
#set($countyCounter = 0)
#set($itemCount = 0)
#set($numCounties = ${list.size($areas)})
#set($numIndepCity = 0)
#set($useStates = false)
### CHECK FOR DUPLICATE COUNTY NAMES WITHIN A CWA
#parse("dupCounties.vm")
#foreach (${area} in ${areas})
#if(${list.contains($dupcounties, "${area.state_zone}")})
#set($useStates = true)
#end
#end
##END DUPE COUNTY NAME CHECK
#foreach (${area} in ${areas})
####
## THIS SECTION OF CODE REMOVES CENTRAL AND/OR EXTREME FROM THE PART OF STATE ARRAY
## IF NECESSARY SO THAT WE CAN LOGICALLY DO OUR COMPARISONS
#set($partOfState = [])
#foreach ($pos in ${area.partOfParentRegion})
#if(${pos} == "CENTRAL")
#if(${useCentralState})
#set($temp = $partOfState.add(${pos}))
#end
#elseif(${pos} == "EXTREME")
#if(${useExtremeState})
#set($temp = $partOfState.add(${pos}))
#end
#else
#set($temp = $partOfState.add(${pos}))
#end
#end
####
#set($itemCount = $itemCount + 1)
#set($fipsIdx = 2)
#if(${areaSource.equalsIgnoreCase("MARINEZONES")})
#set($fipsIdx = 3)
#end
#set($FIPS = ${area.fips.substring(${fipsIdx})})
#set($intFIPS = 0)
#if(${intFIPS.parseInt($FIPS)} < 500 || ${areaFIPS} == "false" || ${area.stateabbr} == "TX")
#set($countyCounter = $countyCounter + 1)
##INITIALIZE CHECK VARIABLES
#if($countyCount == 0)
#if(${area.partOfArea})
#set($prevPartOfCounty = ${area.partOfArea})
#else
#set($prevPartOfCounty = [])
#end
#set($prevCounty = ${area.name})
#set($prevCountyType = ${area.areaNotation})
#set($prevCountiesType = ${area.areasNotation})
#set($prevStateAbbrev = ${area.stateabbr})
#set($prevState = ${area.parentRegion})
#set($prevPartOfState = ${partOfState})
#end
### BEGIN FORMULATING HEADLINE...CHECKING FOR CHANGES IN PART OF STATE,
### STATE, COUNTYTYPE, AND INDEPENDENT CITIES...AS WELL AS PLURALITY
###
### IF WE ARE NOT ON THE LAST ITEM, BUT WE HAVE EITHER
### 1.) CHANGED COUNTY NOMENCLATURE (COUNTY TO PARISH)
### 2.) CHANGED STATE (and we have a duplicate countyname requiring the state to be output)
### 3.) CHANGED PART OF STATE (and we have a duplicate countyname requiring the state to be output)
#if(${itemCount} < ${numCounties} && (${prevCountyType} != ${area.areaNotation} || ((${prevState} != ${area.parentRegion} || ${prevPartOfState} != ${partOfState}) && ${useStates} == true)))
#if(${countyCount} == 1)
#if(${countyCounter} > 2)
...##
#end
#if(${prevStateAbbrev} == "DC")
THE ##
#end
#if(${prevPartOfCounty.size()} > 0)
#areaFormat(${prevPartOfCounty} ${useCentralCounty} ${useExtremeCounty} true)##
#end
${prevCounty}##
#if((${prevCountyType} != ${area.areaNotation} || ${useStates} == true) && ${prevStateAbbrev} != "DC")
#if(${prevCountyType.length()} > 0) 
 ${prevCountyType}##
#end
#end
#if(${useStates} == true && ${prevStateAbbrev} != "DC")
 IN ##
#areaFormat(${prevPartOfState} ${useCentralState} ${useExtremeState} true)##
${prevState}##
#end
#else
 AND ##
#if(${prevStateAbbrev} == "DC")
THE ##
#end
#if(${prevPartOfCounty.size()} > 0)
#areaFormat(${prevPartOfCounty} ${useCentralCounty} ${useExtremeCounty} true)##
#end
${prevCounty}##
#if(${prevCountyType} != ${area.areaNotation} || ${useStates} == true)
#if(${countyCount} > 1)
#if(${prevCountiesType})
#if(${prevCountiesType.length()} > 0) 
 ${prevCountiesType}##
#end
#end
#elseif(${prevCountyType})
#if(${prevCountyType.length()} > 0) 
 ${prevCountyType}##
#end
#end
#end
#if(${useStates} == true && ${prevStateAbbrev} != "DC")
 IN ##
#areaFormat(${prevPartOfState} ${useCentralState} ${useExtremeState} true)##
${prevState}##
#end 
#end
#set($countyCount = 1)
### IF WE ARE ON THE LAST ITEM...OUTPUT THE PREVIOUS AND LAST ITEM
#elseif(${itemCount} == ${numCounties})
#if(${countyCount} >= 1)
#if(${countyCounter} > 2)
...##
#end
#if(${prevStateAbbrev} == "DC")
THE ##
#end
#if(${prevPartOfCounty.size()} > 0)
#areaFormat(${prevPartOfCounty} ${useCentralCounty} ${useExtremeCounty} true)##
#end
${prevCounty}##
#if(${prevStateAbbrev} != "DC" && (${prevCountyType} != ${area.areaNotation} || (${prevCountyType} != ${area.areaNotation} || ((${prevState} != ${area.parentRegion} || ${prevPartOfState} != ${partOfState}) && ${useStates} == true))))
#if(${countyCount} > 1)
#if(${prevCountiesType})
#if(${prevCountiesType.length()} > 0) 
 ${prevCountiesType}##
#end
#end
#elseif(${prevCountyType})
#if(${prevCountyType.length()} > 0) 
 ${prevCountyType}##
#end
#end
#end
#if((${prevCountyType} != ${area.areaNotation} || ((${prevState} != ${area.parentRegion} || ${prevPartOfState} != ${partOfState}) && ${useStates} == true)) && ${prevStateAbbrev} != "DC")
 IN ##
#areaFormat(${prevPartOfState} ${useCentralState} ${useExtremeState} true)##
${prevState}##
#end
 AND ##
#if(${area.stateabbr} == "DC")
THE ##
#end
#if(${area.partOfArea})
#areaFormat(${area.partOfArea} ${useCentralCounty} ${useExtremeCounty} true)##
#end
${area.name}##
#if(${area.areasNotation})
#if(${countyCount} >= 1 && ${area.areasNotation.length()} > 0)
 ${area.areasNotation}##
#elseif(${area.areasNotation.length()} > 0)
 ${area.areaNotation}##
#end
#end
##
#if(${useStates} == true && ${prevStateAbbrev} != "DC")
 IN ##
#areaFormat(${partOfState} ${useCentralState} ${useExtremeState} true)##
${area.parentRegion}##
#end
#else
#if(${countyCounter} > 1)
...##
#if(${numIndepCity} == 0)
 AND ##
#end
#end
#if(${area.stateabbr} == "DC")
THE ##
#end
#if(${area.partOfArea})
#areaFormat(${area.partOfArea} ${useCentralCounty} ${useExtremeCounty} true)##
#end
${area.name}##
#if(${area.areasNotation.length()} > 0)
 ${area.areaNotation}##
#end
#if(${useStates} == true && ${area.stateabbr} != "DC")
 IN ##
#areaFormat(${partOfState} ${useCentralState} ${useExtremeState} true)##
${area.parentRegion}##
#end		
#end
#set($countyCount = 0)
###ELSE WE ARE IN THE MIDDLE OF OUR LIST WITH NO CHANGES...JUST OUTPUT THE 
###AREA NAME
#else
#if(${countyCounter} > 1)
#if(${countyCounter} > 2)
...##
#end
#if(${prevStateAbbrev} == "DC")
THE ##
#end
#if(${prevPartOfCounty.size()} > 0)
#areaFormat(${prevPartOfCounty} ${useCentralCounty} ${useExtremeCounty} true)##
#end
${prevCounty}##
#end
#set($countyCount= $countyCount + 1)
#end
####DONE OUTPUTTING. SET CURRENT VARIABLES TO PREVIOUS
#if(${area.partOfArea})
#set($prevPartOfCounty = ${area.partOfArea})
#else
#set($prevPartOfCounty = [])
#end
#set($prevCounty = ${area.name})
#set($prevCountyType = ${area.areaNotation})
#set($prevCountiesType = ${area.areasNotation})
#set($prevState = ${area.parentRegion})
#set($prevStateAbbrev = ${area.stateabbr})
#set($prevPartOfState = ${partOfState})
####THIS IS AN INDEPENDENT CITY...ADD TO COUNTER FOR NOW
#else
#set($numIndepCity = $numIndepCity + 1)
#end
#end
#### NOW DO INDEPENDENT CITIES #########
#if(${numIndepCity} > 0)
#set($indepCityCount = 0)
#foreach (${area} in ${areas})
#set($FIPS = ${area.fips.substring(2)})
#set($intFIPS = 0)
#if(${intFIPS.parseInt($FIPS)} >= 500 && ${area.stateabbr} != "TX" && ${areaFIPS} == "true")
#set($indepCityCount= $indepCityCount + 1)
#if(${indepCityCount} == 1 && ${countyCount} > 0)
#if(${countyCounter} > 1) 
...##
#end
#if(${prevStateAbbrev} == "DC")
THE ##
#end
#if(${prevPartOfCounty})
#areaFormat(${prevPartOfCounty} ${useCentralCounty} ${useExtremeCounty} true)##
#end
${prevCounty} ##
#if(${countyCount} > 1 && ${prevStateAbbrev} != "DC")
#if(${prevCountiesType})
${prevCountiesType}##
#elseif(${prevCountyType})
${prevCountyType}##
#end
#end
#if(${useStates} == true)
 IN ##
#areaFormat(${prevPartOfState} ${useCentralState} ${useExtremeState} true)##
${prevState}##
#end
#end
#if(${indepCityCount} == ${numIndepCity})
#if(${indepCityCount} == 1)
### COUNTIES + 1 INDEPENDENT CITY
#if(${numCounties} > ${numIndepCity})
 AND THE ${area.name}##
### NO COUNTIES AND ONE INDEPENDENT CITY
#else
THE ##
#if(${area.partOfArea})
#areaFormat(${area.partOfArea} ${useCentralCounty} ${useExtremeCounty} true)##
#end
${area.name}##
#end
#else
## MULTIPLE INDEPENDENT CITIES...LAST ITEM IN THE LIST
 AND THE ##
#if(${area.partOfArea})
#areaFormat(${area.partOfArea} ${useCentralCounty} ${useExtremeCounty} true)##
#end
${area.name}##
#end
#else
...THE ##
#if(${area.partOfArea})
#areaFormat(${area.partOfArea} ${useCentralCounty} ${useExtremeCounty} true)##
#end
${area.name}##
#end
#end
#end
#end
#end
########END MACRO

####################################################################
##### BEGIN NEW STATEMENT/ADVISORY ZONE HEADLINE CODE     ##########
## AUTHORED BY EVAN BOOKBINDER WFO EAX 9-13-2012          ##########
## useCentralxxx = boolean to use the word CENTRAL in the Zone or State phrase
## useExtremexxx = boolean to use the word EXTREME in the county of State phrase
####################################################################
#macro(zoneHeadlineLocList $areas $useCentralZone $useExtremeZone $useCentralState $useExtremeState)
#set($zoneCount = 0)
#set($zoneCounter = 0)
#set($itemCount = 0)
#set($numZones = ${list.size($areas)})
#set($useStates = false)
### CHECK FOR DUPLICATE COUNTY NAMES WITHIN A CWA
#parse("dupCounties.vm")
#foreach (${area} in ${areas})
#if(${list.contains($dupcounties, "${area.fips}")})
#set($useStates = true)
#end
#end
##END DUPE COUNTY NAME CHECK
#foreach (${area} in ${areas})
####
## THIS SECTION OF CODE REMOVES CENTRAL AND/OR EXTREME FROM THE PART OF STATE ARRAY
## IF NECESSARY SO THAT WE CAN LOGICALLY DO OUR COMPARISONS
#set($partOfState = [])
#foreach ($pos in ${area.partOfParentRegion})
#if(${pos} == "CENTRAL")
#if(${useCentralState})
#set($temp = $partOfState.add(${pos}))
#end
#elseif(${pos} == "EXTREME")
#if(${useExtremeState})
#set($temp = $partOfState.add(${pos}))
#end
#else
#set($temp = $partOfState.add(${pos}))
#end
#end
####
#set($itemCount = $itemCount + 1)
#set($zoneCounter = $zoneCounter + 1)
##INITIALIZE CHECK VARIABLES
#if($zoneCount == 0)
#if(${area.partOfArea})
#set($prevPartOfZone = ${area.partOfArea})
#else
#set($prevPartOfZone = [])
#end
#set($prevZone = ${area.name})
#set($prevStateAbbrev = ${area.stateabbr})
#set($prevState = ${area.parentRegion})
#set($prevPartOfState = ${partOfState})
#end
### BEGIN FORMULATING HEADLINE...CHECKING FOR CHANGES IN PART OF STATE,
### STATE, COUNTYTYPE, AND INDEPENDENT CITIES...AS WELL AS PLURALITY
###
### IF WE ARE NOT ON THE LAST ITEM, BUT WE HAVE EITHER
### 1.) CHANGED COUNTY NOMENCLATURE (COUNTY TO PARISH)
### 2.) CHANGED STATE (and we have a duplicate zonename requiring the state to be output)
### 3.) CHANGED PART OF STATE (and we have a duplicate zonename requiring the state to be output)
#if(${itemCount} < ${numZones} && (((${prevState} != ${area.parentRegion} || ${prevPartOfState} != ${partOfState}) && ${useStates} == true)))
#if(${zoneCount} == 1)
#if(${zoneCounter} > 2)
...##
#end
#if(${prevStateAbbrev} == "DC")
THE ##
#end
#if(${prevPartOfZone.size()} > 0)
#areaFormat(${prevPartOfZone} ${useCentralZone} ${useExtremeZone} true)##
#end
${prevZone}##
#if(${useStates} == true && ${prevStateAbbrev} != "DC")
#if(${prevStateAbbrev.length()} > 0) 
 IN ##
#else
IN ##
#end
#areaFormat(${prevPartOfState} ${useCentralState} ${useExtremeState} true)##
${prevState}##
#end
#else
 AND ##
#if(${prevStateAbbrev} == "DC")
THE ##
#end
#if(${prevPartOfZone.size()} > 0)
#areaFormat(${prevPartOfZone} ${useCentralZone} ${useExtremeZone} true)##
#end
${prevZone}##
#if(${useStates} == true && ${prevStateAbbrev} != "DC")
#if(${prevStateAbbrev.length()} > 0) 
 IN ##
#else
IN ##
#end
#areaFormat(${prevPartOfState} ${useCentralState} ${useExtremeState} true)##
${prevState}##
#end 
#end
#set($zoneCount = 1)
### IF WE ARE ON THE LAST ITEM...OUTPUT THE PREVIOUS AND LAST ITEM
#elseif(${itemCount} == ${numZones})
#if(${zoneCount} >= 1)
#if(${zoneCounter} > 2)
...##
#end
#if(${prevStateAbbrev} == "DC")
THE ##
#end
#if(${prevPartOfZone.size()} > 0)
#areaFormat(${prevPartOfZone} ${useCentralZone} ${useExtremeZone} true)##
#end
${prevZone}##
#if(((${prevState} != ${area.parentRegion} || ${prevPartOfState} != ${partOfState}) && ${useStates} == true)) && ${prevStateAbbrev} != "DC")
#if(${prevStateAbbrev.length()} > 0) 
 IN ##
#else
IN ##
#end
#areaFormat(${prevPartOfState} ${useCentralState} ${useExtremeState} true)##
${prevState}##
#end
 AND ##
#if(${area.stateabbr} == "DC")
THE ##
#end
#if(${area.partOfArea})
#areaFormat(${area.partOfArea} ${useCentralZone} ${useExtremeZone} true)##
#end
${area.name}##
#if(${useStates} == true && ${prevStateAbbrev} != "DC")
#if(${prevStateAbbrev.length()} > 0) 
 IN ##
#else
IN ##
#end
#areaFormat(${partOfState} ${useCentralState} ${useExtremeState} true)##
${area.parentRegion}##
#end
#else
#if(${zoneCounter} > 1)
...AND ##
#end
#if(${area.stateabbr} == "DC")
THE ##
#end
#if(${area.partOfArea})
#areaFormat(${area.partOfArea} ${useCentralZone} ${useExtremeZone} true)##
#end
${area.name} ##
#if(${useStates} == true && ${area.stateabbr} != "DC")
#if(${area.stateabbr.length()} > 0) 
 IN ##
#else
IN ##
#end
#areaFormat(${partOfState} ${useCentralState} ${useExtremeState} true)##
${area.parentRegion}##
#end		
#end
#set($zoneCount = 0)
###ELSE WE ARE IN THE MIDDLE OF OUR LIST WITH NO CHANGES...JUST OUTPUT THE 
###AREA NAME
#else
#if(${zoneCounter} > 1)
#if(${zoneCounter} > 2)
...##
#end
#if(${prevStateAbbrev} == "DC")
THE ##
#end
#if(${prevPartOfZone.size()} > 0)
#areaFormat(${prevPartOfZone} ${useCentralZone} ${useExtremeZone} true)##
#end
${prevZone}##
#end
#set($zoneCount= $zoneCount + 1)
#end
####DONE OUTPUTTING. SET CURRENT VARIABLES TO PREVIOUS
#if(${area.partOfArea})
#set($prevPartOfZone = ${area.partOfArea})
#else
#set($prevPartOfZone = [])
#end
#set($prevZone = ${area.name})
#set($prevState = ${area.parentRegion})
#set($prevStateAbbrev = ${area.stateabbr})
#set($prevPartOfState = ${partOfState})
#end
#end
########END MACRO

######### MACRO TO GENERATE FIRST BULLET IN WARNINGS ##########
#macro(firstBullet $areas)
#foreach (${area} in ${areas}) 
#set($FIPS = ${area.fips.substring(2)})
#set($intFIPS = 0)
##OUTPUT FOR NORMAL COUNTIES/ZONES
#if((${intFIPS.parseInt($FIPS)} < 500 || ${areaFIPS} == "false" || ${area.stateabbr} == "TX") && ${area.stateabbr} != "DC")
#if(${area.partOfArea})
#areaFormat(${area.partOfArea} true true true)##
#end
#if(${area.areaNotation.length()} > 0) 
${area.name} ${area.areaNotation} IN ##
#else
${area.name} IN ##
#end
#areaFormat(${area.partOfParentRegion} true false true)##
${area.parentRegion}...
##OUTPUT FOR D.C.
#elseif (${area.stateabbr} == "DC")
THE ##
#if(${area.partOfArea})
#areaFormat(${area.partOfArea} true false true)##
#end
${area.name}...
##OUTPUT FOR INDEPENDENT CITIES
#else 
THE ##
#if(${area.partOfArea})
#areaFormat(${area.partOfArea} true false true)## 
#end
${area.name} IN ##
#areaFormat(${area.partOfParentRegion} true false true)##
${area.parentRegion}...
#end
#end
## COMMENTED OUT 5 LINES BELOW THIS IS GENERALLY NOT UTILIZED - you can unREMARK if desired
## #if(${list.size($area.points)} > 1)
##    THIS INCLUDES THE CITIES OF... #foreach (${city} in ${area.points})${city}... #end
## #elseif(${list.size($area.points)} > 0)  
##    THIS INCLUDES THE CITY OF ${list.get(${area.points},0)}
## #end
#end
########END MACRO

######### MACRO TO GENERATE FIRST BULLET IN WARNINGS ##########
#macro(firstBulletNew $areas)
#set($countyFlag = 0)
#set($parishFlag = 0)
##ONE LOCATION AND ONLY DC
#if(${list.size($areas)} == 1 && ${list.get(${areas},0).stateabbr} == "DC")
...
##ONE LOCATION AND ONLY Louisiana
#elseif(${list.size($areas)} == 1 && ${list.get(${areas},0).stateabbr} == "LA")
THE FOLLOWING PARISH...

##ONE LOCATION AND ONLY Alaska
#elseif(${list.size($areas)} == 1 && ${list.get(${areas},0).stateabbr} == "AK")
THE FOLLOWING AREA...

##ONE LOCATION AND ONLY PR
#elseif(${list.size($areas)} == 1 && ${list.get(${areas},0).stateabbr} == "PR")
THE FOLLOWING MUNICIPALITY...

##ONE LOCATION OTHERWISE
#elseif(${list.size($areas)} == 1)
THE FOLLOWING COUNTY...
#else
##MULTIPLE LOCATIONS
#foreach (${area} in ${areas})
#if(${area.stateabbr} == "LA")
#set($parishFlag = ${parishFlag} + 1)
#end
#end
#if(${parishFlag} == 0)
#if(${area.stateabbr} == "AK")
THE FOLLOWING MUNICIPALITIES...

#elseif(${area.stateabbr} == "PR")
THE FOLLOWING AREAS...

#else
THE FOLLOWING COUNTIES...

#end
#elseif(${list.size($areas)} == ${parishFlag})
THE FOLLOWING PARISHES...

#else
THE FOLLOWING COUNTIES AND PARISHES...

#end
#end

#set($partOfState = "")
#set($stateAbbrev = "")
#foreach (${area} in ${areas})
#set($test1 = "#areaFormat(${area.partOfParentRegion} true false true)")
#set($test2 = ${area.stateabbr})
#if(${test1} != ${partOfState} || ${test2} != ${stateAbbrev})
#set($partOfState = ${test1})
#set($stateAbbrev = ${test2})
#if (${area.stateabbr} != "DC")

  IN ${partOfState}${area.parentRegion}...
#end
#end
#set($FIPS = ${area.fips.substring(2)})
#set($intFIPS = 0)
#set($partOfArea = "")
##OUTPUT FOR NORMAL COUNTIES/ZONES
#if((${intFIPS.parseInt($FIPS)} < 500 || ${areaFIPS} == "false" || ${area.stateabbr} == "TX") && ${area.stateabbr} != "DC")
#if(${area.partOfArea})
#set($partOfArea = "#areaFormat(${area.partOfArea} true true true)")
#end
  ${partOfArea}${area.name}...
##OUTPUT FOR D.C.
#elseif (${area.stateabbr} == "DC")

  THE ##
#if(${area.partOfArea})
#set($partOfArea = "#areaFormat(${area.partOfArea} true false true)")
#end
${partOfArea}${area.name}...
##OUTPUT FOR INDEPENDENT CITIES
#else 
  THE ##
#if(${area.partOfArea})
#set($partOfArea = "#areaFormat(${area.partOfArea} true false true)") 
#end
${partOfArea}${area.name}...
#end
#end
## COMMENTED OUT 5 LINES BELOW THIS IS GENERALLY NOT UTILIZED - you can unREMARK if desired
## #if(${list.size($area.points)} > 1)
##    THIS INCLUDES THE CITIES OF... #foreach (${city} in ${area.points})${city}... #end
## #elseif(${list.size($area.points)} > 0)  
##    THIS INCLUDES THE CITY OF ${list.get(${area.points},0)}
## #end
#end
########END MACRO

######### MACRO TO GENERATE SECOND BULLET (UNTIL XXXX AMPM TZ (DAY) IN WARNINGS ##########
#macro(secondBullet $dateUtil $expire $timeFormat $localtimezone $secondtimezone $duration)
#if(${duration} >= 360)
UNTIL ${dateUtil.formatUseNoonMidnight(${expire}, ${timeFormat.plain}, 15, ${localtimezone})}##
#else
UNTIL ${dateUtil.formatUseNoonMidnight(${expire}, ${timeFormat.clock}, 15, ${localtimezone})}##
#end
#if(${secondtimezone})
#if(${duration} >= 360)
/${dateUtil.formatUseNoonMidnight(${expire}, ${timeFormat.plain}, 15, ${secondtimezone})}/##
#else
/${dateUtil.formatUseNoonMidnight(${expire}, ${timeFormat.clock}, 15, ${secondtimezone})}/##
#end
#end
#end
########END MACRO

######### MACRO TO GENERATE START OF THIRD BULLET
#macro(thirdBullet $dateUtil $eventTime $timeFormat $localtimezone $secondtimezone)
#set($time = ${now})
#if(${corToNewMarker})
##overload eventTime with global corCreateTime variable
#set($time = ${corCreateTime})
#end
###OLD CODE BLOCK FOR EVENT TIME
###set($time = ${eventTime})
###if(${corToNewMarker})
####overload eventTime with global corEventTime variable
###set($time = ${corEventTime})
###end
AT ${dateUtil.format(${time}, ${timeFormat.clock}, ${localtimezone})}##
#if(${secondtimezone})
 /${dateUtil.format(${time}, ${timeFormat.clock}, ${secondtimezone})}/##
#end
#end
########END MACRO

## AUTHOR: EVAN BOOKBINDER
## This macro will output a pathcast based on the thresholds/parameters
## defined in the product's .xml configuration file
##    1 - SEVERE THUNDERSTORMS WILL BE NEAR...
##        WARRIOR...MORRIS...KIMBERLY AND BLOUNT SPRINGS AROUND 800 PM CDT...
##        TRAFFORD AND HAYDEN AROUND 805 PM CDT...
##        COUNTY LINE...BROOKSVILLE AND BANGOR AROUND 810 PM CDT...
##        LOCUST FORK AROUND 815 PM CDT...
## Inputs: pathcastLead (string containing a lead-in to the pathcast)
##         otherLead (string containing a lead-in to the list of other (typically 3rd level) towns
##         pathCast (array of ClosestPoint objects)
##         otherPoints (a single ClosestPoint object containing a list of typically 3rd level towns)
##         areas (array of area objects (counties, parishes, etc...)
##         dateUtil (date utility object)
##         timeFormat (time formatting object)
#macro(pathCast $pathcastLead $otherLead $pathCast $otherPoints $areas $dateUtil $timeFormat $marineFlag)
#set($hasPoints = 0)
#foreach(${pc} in ${pathCast})
#if(${pc.points})
#set($hasPoints = 1)
#end
#end
#if(${pathCast} && ${hasPoints} == 1)
${pathcastLead}
#foreach (${pc} in ${pathCast})
#if(${pc.points})
#set($numCities = ${list.size($pc.points)})
#set($count = 0)
  ##
#foreach (${city} in ${pc.points})
#if(${city.partOfArea}) 
#set($location = "#areaFormat(${city.partOfArea} true false false) ${city.name}")
#set($location = ${city.trim()})
#else
#set($location = "${city.name}")
#end
${location}##
#set($count = $count + 1)
#if($count == $numCities - 1)
 AND ##
#elseif($count < $numCities)
...##
#end
#end
 AROUND ${dateUtil.format(${pc.time}, ${timeFormat.clock}, ${pc.timeZone})}.
#end
#end
###NOW SEARCH FOR OTHER POINTS (PRESUMABLY 3s) AND LIST THEM HERE
#set($numOtherPoints = ${list.size($otherPoints)})
#if($numOtherPoints > 0)

OTHER LOCATIONS IMPACTED BY ${otherLead} INCLUDE ##
#set($count = 0)
#foreach(${loc} in ${otherPoints})
#set($count = $count + 1)
#if(${loc.partOfArea}) 
#set($location = "#areaFormat(${loc.partOfArea} true false false) ${loc.name}")
#set($location = ${loc.trim()})
#else
#set($location = "${loc.name}")
#end
${location}##
#if($count == $numOtherPoints - 1)
 AND ##
#elseif($count < $numOtherPoints)
...##
#else
.
#end
#end
#end
#else
#if($marineFlag == 1)
${otherLead} WILL REMAIN OVER MAINLY OPEN WATERS.
#else
${otherLead} WILL REMAIN OVER ${noLocPhrase} OF ##
#headlineLocList(${areas} true true true false).##
###NOW SEARCH FOR OTHER POINTS (PRESUMABLY 3s) AND LIST THEM HERE
### NEED TO CODE THIS ONCE SECTION IS ADDED
#set($numOtherPoints = ${list.size($otherPoints)})
#if($numOtherPoints > 0)
..INCLUDING THE FOLLOWING LOCATIONS...##
#set($count = 0)
#foreach(${loc} in ${otherPoints})
#set($count = $count + 1)
#if(${loc.partOfArea}) 
#set($location = "#areaFormat(${loc.partOfArea} true false false) ${loc.name}")
#set($location = ${loc.trim()})
#else
#set($location = "${loc.name}")
#end
${location}##
#if($count == $numOtherPoints - 1)
 AND ##
#elseif($count < $numOtherPoints)
...##
#else
.##
#end
#end
#end

#end
#end
#end
########END MACRO

## AUTHOR: EVAN BOOKBINDER
## FORCES INDENTED TEXT/LINE WRAPPING
## INPUT VARIABLES: inString - Input String
##                  indentChars - # of characters to indent on first line
##                  indentCharsSub - # of chars to indent on subsequent lines                   
#macro(wrapText $inString $indentChars $indentCharsSub)
#set($defLineWrap = 69)
#set($lineNum = 1)
#set($applyIndent = 1)
#set($charcount = 0)
#set($strArray = ${inString.split(" ")})
#foreach ($word in $strArray)
#if(($charcount + ${word.length()} + 1) > $defLineWrap)
#set($lineNum = ${lineNum} + 1)
#set($applyIndent = 1)
#set($charcount = 0)

#end
#if($applyIndent == 1)
#set($applyIndent = 0)
#if($lineNum == 1)
#set($spaces = $indentChars)
#else
#set($spaces = $indentCharsSub)
#end
##INITIALIZE Character count for this line
#set($charcount = $spaces)
#if(${spaces} > 0)
#foreach ($indent in [1..${spaces}])
 ##
#end
#end
#end
${word} ##
#set($charcount = $charcount + ${word.length()} + 1)
#end

#end
########END MACRO

## AUTHOR: EVAN BOOKBINDER
## OUTPUTS A STRING PADDED WITH WHITESPACE
## USED FOR COLUMN FORMATTING OF CITIES
## input string, column width, force line feeds?
#macro(padOutput $inString $width $lineFeed)
#set($ellipsesTest = $width - 3)
#if(${inString.length()} >= $ellipsesTest)
##return instead of output
#if(${lineFeed})
${inString.substring(0,$ellipsesTest)}...
#else
${inString.substring(0,$ellipsesTest)}...##
#end
#else
${inString}...##
#if(${lineFeed} == 1)

#else
#set($bufferSize = $ellipsesTest - ${inString.length()})
#foreach ($buffer in [1..${bufferSize}])
 ##
#end
#end
#end
#end
########END MACRO

## AUTHOR: EVAN BOOKBINDER
## Updated by Phil Kurimski to fix an error with one location impacted
## This macro will output a location list based on the thresholds/parameters
## defined in the  product's .xml configuration file
##   1 - LOCATIONS IMPACTED INCLUDE
##        CROSSVILLE...
##        COLLINSVILLE...
##   2 -  LOCATIONS IMPACTED INCLUDE
##        FAIRVIEW...CULLMAN...
##        JOPPA...PHELAN...
##        ARAB...WILBURN...
##   3 -  LOCATIONS IN THE WARNING INCLUDE BUT ARE NOT LIMITED TO
##        QUINTON...SUSAN MOORE...WEST JEFFERSON...WARRIOR...ROSA...
##        FAIRVIEW...LOCUST FORK...TRAFFORD...ARGO...ANDERSON AND ALTON
## Inputs: bulletLead (string containing a lead-in to the list of cities e.g. LOCATIONS IMPACTED INCLUDE...)
##         stormType (string containing the storm type e.g. SEVERE THUNDERSTORM)
##         columns (number of columns to list the cities (0 is a normal ellipsees separated list)
##         cityList (a single pointSource object containing a list of towns)
##         areas (array of area objects (counties, parishes, etc...)
##         dateUtil (date utility object)
##         timeFormat (time formatting object)
##         marineFlag (1 if marine product)
#macro(locationsList $bulletLead $ruralPhrase $columns $locList $otherLocList $areas $dateUtil $timeFormat $marineFlag)
#set($numMajorPoints = ${list.size($locList)})
#if($numMajorPoints > 0)
${bulletLead}
#set($count = 0)
#set($colWidth = 69 / $columns)
#set($colCount = 0)
#foreach(${loc} in ${locList})
#if(${loc.partOfArea}) 
#set($location = "#areaFormat(${loc.partOfArea} true false false) ${loc.name}")
#set($location = ${location.trim()})
#else
#set($location = "${loc.name}")
#end
#set($count = $count + 1)
#if($count < $numMajorPoints)
#set($strOutput = "${location}...")
#else
#set($strOutput = "${location}.")
#end
##Exception for 2 items in straight list
#if((${count} == ${numMajorPoints} - 1) && $columns == 0)
#set($strOutput = "${location} ")
#end
##STRAIGHT LIST
#if($columns == 0)
#if($numMajorPoints == 1)
${strOutput}##
#else
#if($count != $numMajorPoints)
${strOutput}##
#else
AND ${strOutput}##
 
#end
#end
##ONE PER LINE
#elseif($columns == 1)
#if($count != $numMajorPoints)
${strOutput}
#else
AND ${strOutput} 

#end
##MULTIPLE COLUMNS
#else
#set($colCount = $colCount + 1)
#if($colCount != $columns)
#padOutput(${location} $colWidth 0)
#else
#padOutput(${location} $colWidth 1)
#set($colCount = 0)
#end
#end
#end
###ADD BLANK LINE AT END
#if($count > 0)

#end
#else
#if($marineFlag == 1)
${ruralPhrase} WILL REMAIN OVER MAINLY OPEN WATERS.
#else
## NO MAJOR POINTS FOUND. LIST RURAL AREAS
${ruralPhrase} WILL REMAIN OVER ${noLocPhrase} OF #headlineLocList(${areas} true true true false).##
#set($numMinorPoints = ${list.size($otherLocList)})
#if(${numMinorPoints} == 1)
..WHICH INCLUDES ##
#elseif(${numMinorPoints} > 1)
..INCLUDING THE FOLLOWING LOCATIONS...##
#else

#end
#set($count = 0)
#foreach(${loc} in ${otherLocList})
#if(${loc.partOfArea}) 
#set($location = "#areaFormat(${loc.partOfArea} true false false) ${loc.name}")
#set($location = ${location.trim()})
#else
#set($location = "${loc.name}")
#end
#set($count = $count + 1)
#if(${count} < ${numMinorPoints} - 1)
${location}...##
#elseif(${count} == ${numMinorPoints} - 1)
${location} ##
#elseif(${count} == ${numMinorPoints} && ${count} != 1)
AND ${location}.
#elseif(${count} == ${numMinorPoints})
${location}.

#end
#end
#end
#end
#end
