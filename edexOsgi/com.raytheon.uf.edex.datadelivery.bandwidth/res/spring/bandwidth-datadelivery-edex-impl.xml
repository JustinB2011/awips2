<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
      http://www.springframework.org/schema/tx
  http://www.springframework.org/schema/tx/spring-tx.xsd
  http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <tx:annotation-driven transaction-manager="metadataTxManager"
        proxy-target-class="true" />

    <!-- Stores beans that are used in bandwidth-datadelivery.xml, but that 
        have different implementations between production code and test code -->
    <bean
        class="com.raytheon.uf.edex.datadelivery.bandwidth.EdexBandwidthContextFactory">
        <!-- This bean version is used to set the EDEX instance of BandwidthManager -->
        <constructor-arg ref="bandwidthManager" />
    </bean>

    <bean id="hibernateBandwidthDbInit"
        class="com.raytheon.uf.edex.datadelivery.bandwidth.hibernate.HibernateBandwidthDbInit">
        <property name="dao" ref="bandwidthAllocationDao" />
    </bean>

    <!-- Used as the context for creating the BandwidthManager -->
    <bean id="bandwidthContextFactory"
        class="com.raytheon.uf.edex.datadelivery.bandwidth.EdexBandwidthContextFactory">
        <!-- The bandwidth dao implementation -->
        <constructor-arg ref="hibernateBandwidthDao" />
        <!-- TODO: Switch to use database bandwidth buckets 
        <constructor-arg ref="hibernateBandwidthBucketDao" /> -->
        <constructor-arg>
            <bean class="com.raytheon.uf.edex.datadelivery.bandwidth.InMemoryBandwidthBucketDao" />
        </constructor-arg>
        <!-- The bandwidth manager initializer -->
        <constructor-arg>
            <bean
                class="com.raytheon.uf.edex.datadelivery.bandwidth.hibernate.HibernateBandwidthInitializer">
                <constructor-arg>
                    <bean
                        class="com.raytheon.uf.edex.datadelivery.bandwidth.util.FindActiveSubscriptionsForRoute">
                        <constructor-arg ref="subscriptionRoutesToSchedule" />
                    </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <!-- The strategy for how to create the bandwidth manager -->
        <constructor-arg ref="bandwidthManagerCreator" />
        <!-- The db initializer -->
        <constructor-arg ref="hibernateBandwidthDbInit" />
    </bean>

    <bean id="dataSetAvailabilityCalculator"
        class="com.raytheon.uf.edex.datadelivery.bandwidth.util.ProviderDataTypeAvailabilityCalculator">
        <constructor-arg ref="ProviderHandler" />
    </bean>

    <camelContext id="BandwidthManager-context"
        xmlns="http://camel.apache.org/schema/spring" errorHandlerRef="errorHandler">

        <route id="bandwidthManagerProcessWork">
            <from
                uri="jms-generic:queue:matureSubscriptions?destinationResolver=#qpidDurableResolver" />
            <doTry>
                <pipeline>
                    <bean ref="serializationUtil" method="transformFromThrift" />
                    <bean ref="BandwidthManagerProcessor" method="process" />
                    <bean ref="BandwidthManagerRetrieval" method="generateRetrieval" />

                    <!-- notify retrieval threads, if data delivery made 
                        into cluster this should move to topic post -->
                    <to uri="direct-vm:notifyRetrieval" />
                </pipeline>
                <doCatch>
                    <exception>java.lang.Throwable</exception>
                    <to
                        uri="log:BandwidthManagerProcess?level=ERROR" />
                </doCatch>
            </doTry>
        </route>
    </camelContext>

</beans>