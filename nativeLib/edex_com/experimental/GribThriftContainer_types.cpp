/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "GribThriftContainer_types.h"


const char* com_raytheon_uf_common_dataplugin_grib_GribThriftContainer::ascii_fingerprint = "95D7C1CC242CB9967B6C72FA20597323";
const uint8_t com_raytheon_uf_common_dataplugin_grib_GribThriftContainer::binary_fingerprint[16] = {0x95,0xD7,0xC1,0xCC,0x24,0x2C,0xB9,0x96,0x7B,0x6C,0x72,0xFA,0x20,0x59,0x73,0x23};

uint32_t com_raytheon_uf_common_dataplugin_grib_GribThriftContainer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numOfRecords);
          this->__isset.numOfRecords = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->records.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            iprot->readListBegin(_etype27, _size24);
            this->records.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += this->records[_i28].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.records = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t com_raytheon_uf_common_dataplugin_grib_GribThriftContainer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("com_raytheon_uf_common_dataplugin_grib_GribThriftContainer");
  xfer += oprot->writeFieldBegin("numOfRecords", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->numOfRecords);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("records", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->records.size());
    std::vector<com_raytheon_uf_common_dataplugin_grib_GribThriftRecord> ::const_iterator _iter29;
    for (_iter29 = this->records.begin(); _iter29 != this->records.end(); ++_iter29)
    {
      xfer += (*_iter29).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


