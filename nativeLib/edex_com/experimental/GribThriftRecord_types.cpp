/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "GribThriftRecord_types.h"
#include <iostream>

const char* com_raytheon_uf_common_dataplugin_grib_GribThriftRecord::ascii_fingerprint = "167D3BB12473F31F7D18D4C88DB977D7";
const uint8_t com_raytheon_uf_common_dataplugin_grib_GribThriftRecord::binary_fingerprint[16] = {0x16,0x7D,0x3B,0xB1,0x24,0x73,0xF3,0x1F,0x7D,0x18,0xD4,0xC8,0x8D,0xB9,0x77,0xD7};

uint32_t com_raytheon_uf_common_dataplugin_grib_GribThriftRecord::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
              this->data.clear();
              uint32_t _size0;
              ::apache::thrift::protocol::TType _etype3;
              iprot->readListBegin(_etype3, _size0);
              this->data.resize(_size0);
              uint32_t _i4;
              for (_i4 = 0; _i4 < _size0; ++_i4)
              {
                xfer += iprot->readI32(this->data[_i4]);
              }
              iprot->readListEnd();
          }
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hybridGrid);
          this->__isset.hybridGrid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
              this->hybridGridData.clear();
              uint32_t _size5;
              ::apache::thrift::protocol::TType _etype8;
              iprot->readListBegin(_etype8, _size5);
              this->hybridGridData.resize(_size5);
              uint32_t _i9;
              for (_i9 = 0; _i9 < _size5; ++_i9)
              {
                xfer += iprot->readI32(this->hybridGridData[_i9]);
              }
              iprot->readListEnd();
          }
          this->__isset.hybridGridData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->localSection);
          this->__isset.localSection = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
              this->localSectionData.clear();
              uint32_t _size10;
              ::apache::thrift::protocol::TType _etype13;
              iprot->readListBegin(_etype13, _size10);
              this->localSectionData.resize(_size10);
              uint32_t _i14;
              for (_i14 = 0; _i14 < _size10; ++_i14)
              {
                xfer += iprot->readI32(this->localSectionData[_i14]);
              }
              iprot->readListEnd();
          }
          this->__isset.localSectionData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->message.read(iprot);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->thinnedGrid);
          this->__isset.thinnedGrid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
              this->thinnedGridData.clear();
              uint32_t _size15;
              ::apache::thrift::protocol::TType _etype18;
              iprot->readListBegin(_etype18, _size15);
              this->thinnedGridData.resize(_size15);
              uint32_t _i19;
              for (_i19 = 0; _i19 < _size15; ++_i19)
              {
                xfer += iprot->readI32(this->thinnedGridData[_i19]);
              }
              iprot->readListEnd();
          }
          this->__isset.thinnedGridData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }
	union {
		int32_t i;
		float f;
	} u;

	int intCounter = 0;
	for (intCounter = 0; intCounter < (int)this->hybridGridData.size(); intCounter++) {
		u.i = this->hybridGridData.at(intCounter);
		float holder = (float)u.f;
		this->trueHybridGridData.push_back(holder);
	}
	for (intCounter = 0; intCounter < (int)this->data.size(); intCounter++) {
		u.i = this->data.at(intCounter);
		float holder = (float)u.f;
		this->trueData.push_back(holder);
	}

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t com_raytheon_uf_common_dataplugin_grib_GribThriftRecord::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("com_raytheon_uf_common_dataplugin_grib_GribThriftRecord");
  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, this->data.size());
    std::vector<int32_t> ::const_iterator _iter20;
    for (_iter20 = this->data.begin(); _iter20 != this->data.end(); ++_iter20)
    {
      xfer += oprot->writeI32((*_iter20));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("hybridGrid", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->hybridGrid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("hybridGridData", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, this->hybridGridData.size());
    std::vector<int32_t> ::const_iterator _iter21;
    for (_iter21 = this->hybridGridData.begin(); _iter21 != this->hybridGridData.end(); ++_iter21)
    {
      xfer += oprot->writeI32((*_iter21));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("localSection", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->localSection);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("localSectionData", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, this->localSectionData.size());
    std::vector<int32_t> ::const_iterator _iter22;
    for (_iter22 = this->localSectionData.begin(); _iter22 != this->localSectionData.end(); ++_iter22)
    {
      xfer += oprot->writeI32((*_iter22));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->message.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("thinnedGrid", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->thinnedGrid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("thinnedGridData", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, this->thinnedGridData.size());
    std::vector<int32_t> ::const_iterator _iter23;
    for (_iter23 = this->thinnedGridData.begin(); _iter23 != this->thinnedGridData.end(); ++_iter23)
    {
      xfer += oprot->writeI32((*_iter23));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


