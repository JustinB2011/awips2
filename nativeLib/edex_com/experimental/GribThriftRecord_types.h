/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef GribThriftRecord_TYPES_H
#define GribThriftRecord_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>
#include "GridDataRequestMessage_types.h"


typedef struct _com_raytheon_uf_common_dataplugin_grib_GribThriftRecord__isset {
  _com_raytheon_uf_common_dataplugin_grib_GribThriftRecord__isset() : data(false), hybridGrid(false), hybridGridData(false), localSection(false), localSectionData(false), message(false), thinnedGrid(false), thinnedGridData(false) {}
  bool data;
  bool hybridGrid;
  bool hybridGridData;
  bool localSection;
  bool localSectionData;
  bool message;
  bool thinnedGrid;
  bool thinnedGridData;
} _com_raytheon_uf_common_dataplugin_grib_GribThriftRecord__isset;

class com_raytheon_uf_common_dataplugin_grib_GribThriftRecord {
 public:

  static const char* ascii_fingerprint; // = "167D3BB12473F31F7D18D4C88DB977D7";
  static const uint8_t binary_fingerprint[16]; // = {0x16,0x7D,0x3B,0xB1,0x24,0x73,0xF3,0x1F,0x7D,0x18,0xD4,0xC8,0x8D,0xB9,0x77,0xD7};

  com_raytheon_uf_common_dataplugin_grib_GribThriftRecord() : hybridGrid(0), localSection(0), thinnedGrid(0) {
  }

  virtual ~com_raytheon_uf_common_dataplugin_grib_GribThriftRecord() throw() {}

  std::vector<int32_t>  data;
  std::vector<float> trueData;
  bool hybridGrid;
  std::vector<int32_t>  hybridGridData;
  std::vector<float> trueHybridGridData;
  bool localSection;
  std::vector<int32_t>  localSectionData;
  com_raytheon_uf_common_dataplugin_grib_request_GridDataRequestMessage message;
  bool thinnedGrid;
  std::vector<int32_t>  thinnedGridData;

  _com_raytheon_uf_common_dataplugin_grib_GribThriftRecord__isset __isset;

  bool operator == (const com_raytheon_uf_common_dataplugin_grib_GribThriftRecord & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(hybridGrid == rhs.hybridGrid))
      return false;
    if (!(hybridGridData == rhs.hybridGridData))
      return false;
    if (!(localSection == rhs.localSection))
      return false;
    if (!(localSectionData == rhs.localSectionData))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(thinnedGrid == rhs.thinnedGrid))
      return false;
    if (!(thinnedGridData == rhs.thinnedGridData))
      return false;
    return true;
  }
  bool operator != (const com_raytheon_uf_common_dataplugin_grib_GribThriftRecord &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const com_raytheon_uf_common_dataplugin_grib_GribThriftRecord & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
