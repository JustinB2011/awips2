/*****************************************************************************************
 * COPYRIGHT (c), 2009, RAYTHEON COMPANY
 * ALL RIGHTS RESERVED, An Unpublished Work
 *
 * RAYTHEON PROPRIETARY
 * If the end user is not the U.S. Government or any agency thereof, use
 * or disclosure of data contained in this source code file is subject to
 * the proprietary restrictions set forth in the Master Rights File.
 *
 * U.S. GOVERNMENT PURPOSE RIGHTS NOTICE
 * If the end user is the U.S. Government or any agency thereof, this source
 * code is provided to the U.S. Government with Government Purpose Rights.
 * Use or disclosure of data contained in this source code file is subject to
 * the "Government Purpose Rights" restriction in the Master Rights File.
 *
 * U.S. EXPORT CONTROLLED TECHNICAL DATA
 * Use or disclosure of data contained in this source code file is subject to
 * the export restrictions set forth in the Master Rights File.
 ******************************************************************************************/

/*
 * Auto-generated code to handle the thrift messages.
 *
 * <pre>
 *
 * SOFTWARE HISTORY
 *
 * Date         Ticket#     Engineer    Description
 * ------------ ----------  ----------- --------------------------
 * 11/9/09       3375       brockwoo    Initial Creation
 *
 * </pre>
 *
 * @author brockwoo
 * @version 1
 */

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef Notification_TYPES_H
#define Notification_TYPES_H

#include <Thrift.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





class DataURINotificationMessage {
 public:

  static const char* ascii_fingerprint; // = "544A7C2D0FBAA52B283383658874CC1E";
  static const uint8_t binary_fingerprint[16]; // = {0x54,0x4A,0x7C,0x2D,0x0F,0xBA,0xA5,0x2B,0x28,0x33,0x83,0x65,0x88,0x74,0xCC,0x1E};

  DataURINotificationMessage() {
  }

  virtual ~DataURINotificationMessage() throw() {}

  std::vector<std::string>  dataURIs;
  std::vector<int32_t>  ids;

  struct __isset {
    __isset() : dataURIs(false), ids(false) {}
    bool dataURIs;
    bool ids;
  } __isset;

  bool operator == (const DataURINotificationMessage & rhs) const
  {
    if (!(dataURIs == rhs.dataURIs))
      return false;
    if (!(ids == rhs.ids))
      return false;
    return true;
  }
  bool operator != (const DataURINotificationMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataURINotificationMessage & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
