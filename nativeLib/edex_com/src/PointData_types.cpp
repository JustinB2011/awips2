/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/*****************************************************************************************
 * COPYRIGHT (c), 2009, RAYTHEON COMPANY
 * ALL RIGHTS RESERVED, An Unpublished Work
 *
 * RAYTHEON PROPRIETARY
 * If the end user is not the U.S. Government or any agency thereof, use
 * or disclosure of data contained in this source code file is subject to
 * the proprietary restrictions set forth in the Master Rights File.
 *
 * U.S. GOVERNMENT PURPOSE RIGHTS NOTICE
 * If the end user is the U.S. Government or any agency thereof, this source
 * code is provided to the U.S. Government with Government Purpose Rights.
 * Use or disclosure of data contained in this source code file is subject to
 * the "Government Purpose Rights" restriction in the Master Rights File.
 *
 * U.S. EXPORT CONTROLLED TECHNICAL DATA
 * Use or disclosure of data contained in this source code file is subject to
 * the export restrictions set forth in the Master Rights File.
 ******************************************************************************************/

/*
 * Extended thrift protocol to handle messages from edex.
 *
 * <pre>
 *
 * SOFTWARE HISTORY
 *
 * Date         Ticket#     Engineer    Description
 * ------------ ----------  ----------- --------------------------
 * 07/29/13       2215       bkowal     Regenerated for thrift 0.9.0
 *
 * </pre>
 *
 * @author bkowal
 * @version 1
 */
#include "PointData_types.h"

#include <algorithm>



const char* com_raytheon_uf_common_pointdata_ParameterDescription::ascii_fingerprint = "F8914BAC237E22C5EFA279EDDBA3C5C6";
const uint8_t com_raytheon_uf_common_pointdata_ParameterDescription::binary_fingerprint[16] = {0xF8,0x91,0x4B,0xAC,0x23,0x7E,0x22,0xC5,0xEF,0xA2,0x79,0xED,0xDB,0xA3,0xC5,0xC6};

uint32_t com_raytheon_uf_common_pointdata_ParameterDescription::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dimension);
          this->__isset.dimension = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dimensionAsInt);
          this->__isset.dimensionAsInt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->fillValue);
          this->__isset.fillValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxLength);
          this->__isset.maxLength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numDims);
          this->__isset.numDims = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->parameterName);
          this->__isset.parameterName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->unit);
          this->__isset.unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t com_raytheon_uf_common_pointdata_ParameterDescription::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("com_raytheon_uf_common_pointdata_ParameterDescription");

  xfer += oprot->writeFieldBegin("dimension", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dimension);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dimensionAsInt", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->dimensionAsInt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fillValue", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->fillValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxLength", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->maxLength);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numDims", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->numDims);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameterName", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->parameterName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->unit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(com_raytheon_uf_common_pointdata_ParameterDescription &a, com_raytheon_uf_common_pointdata_ParameterDescription &b) {
  using ::std::swap;
  swap(a.dimension, b.dimension);
  swap(a.dimensionAsInt, b.dimensionAsInt);
  swap(a.fillValue, b.fillValue);
  swap(a.maxLength, b.maxLength);
  swap(a.numDims, b.numDims);
  swap(a.parameterName, b.parameterName);
  swap(a.unit, b.unit);
  swap(a.__isset, b.__isset);
}

const char* com_raytheon_uf_common_pointdata_elements_StringPointDataObject::ascii_fingerprint = "8432CD88CCBAE483EB61F9210360E5F9";
const uint8_t com_raytheon_uf_common_pointdata_elements_StringPointDataObject::binary_fingerprint[16] = {0x84,0x32,0xCD,0x88,0xCC,0xBA,0xE4,0x83,0xEB,0x61,0xF9,0x21,0x03,0x60,0xE5,0xF9};

uint32_t com_raytheon_uf_common_pointdata_elements_StringPointDataObject::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->description.read(iprot);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dimensions);
          this->__isset.dimensions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->stringData.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->stringData.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->stringData[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.stringData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t com_raytheon_uf_common_pointdata_elements_StringPointDataObject::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("com_raytheon_uf_common_pointdata_elements_StringPointDataObject");

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->description.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dimensions", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->dimensions);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stringData", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->stringData.size()));
    std::vector<std::string> ::const_iterator _iter5;
    for (_iter5 = this->stringData.begin(); _iter5 != this->stringData.end(); ++_iter5)
    {
      xfer += oprot->writeString((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(com_raytheon_uf_common_pointdata_elements_StringPointDataObject &a, com_raytheon_uf_common_pointdata_elements_StringPointDataObject &b) {
  using ::std::swap;
  swap(a.description, b.description);
  swap(a.dimensions, b.dimensions);
  swap(a.stringData, b.stringData);
  swap(a.__isset, b.__isset);
}

const char* com_raytheon_uf_common_pointdata_elements_FloatPointDataObject::ascii_fingerprint = "89584E5DAFB01EC75A91F6E88874692D";
const uint8_t com_raytheon_uf_common_pointdata_elements_FloatPointDataObject::binary_fingerprint[16] = {0x89,0x58,0x4E,0x5D,0xAF,0xB0,0x1E,0xC7,0x5A,0x91,0xF6,0xE8,0x88,0x74,0x69,0x2D};

uint32_t com_raytheon_uf_common_pointdata_elements_FloatPointDataObject::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->description.read(iprot);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dimensions);
          this->__isset.dimensions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->floatData.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->floatData.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += iprot->readI32(this->floatData[_i10]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.floatData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->trueFloatData.clear();
            uint32_t _size11;
            ::apache::thrift::protocol::TType _etype14;
            xfer += iprot->readListBegin(_etype14, _size11);
            this->trueFloatData.resize(_size11);
            uint32_t _i15;
            for (_i15 = 0; _i15 < _size11; ++_i15)
            {
              xfer += iprot->readDouble(this->trueFloatData[_i15]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.trueFloatData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t com_raytheon_uf_common_pointdata_elements_FloatPointDataObject::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("com_raytheon_uf_common_pointdata_elements_FloatPointDataObject");

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->description.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dimensions", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->dimensions);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("floatData", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->floatData.size()));
    std::vector<int32_t> ::const_iterator _iter16;
    for (_iter16 = this->floatData.begin(); _iter16 != this->floatData.end(); ++_iter16)
    {
      xfer += oprot->writeI32((*_iter16));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trueFloatData", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->trueFloatData.size()));
    std::vector<double> ::const_iterator _iter17;
    for (_iter17 = this->trueFloatData.begin(); _iter17 != this->trueFloatData.end(); ++_iter17)
    {
      xfer += oprot->writeDouble((*_iter17));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(com_raytheon_uf_common_pointdata_elements_FloatPointDataObject &a, com_raytheon_uf_common_pointdata_elements_FloatPointDataObject &b) {
  using ::std::swap;
  swap(a.description, b.description);
  swap(a.dimensions, b.dimensions);
  swap(a.floatData, b.floatData);
  swap(a.trueFloatData, b.trueFloatData);
  swap(a.__isset, b.__isset);
}

const char* com_raytheon_uf_common_pointdata_elements_IntPointDataObject::ascii_fingerprint = "3E090BC5D21490BE0856576B426175A4";
const uint8_t com_raytheon_uf_common_pointdata_elements_IntPointDataObject::binary_fingerprint[16] = {0x3E,0x09,0x0B,0xC5,0xD2,0x14,0x90,0xBE,0x08,0x56,0x57,0x6B,0x42,0x61,0x75,0xA4};

uint32_t com_raytheon_uf_common_pointdata_elements_IntPointDataObject::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->description.read(iprot);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dimensions);
          this->__isset.dimensions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->intData.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->intData.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += iprot->readI32(this->intData[_i22]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.intData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t com_raytheon_uf_common_pointdata_elements_IntPointDataObject::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("com_raytheon_uf_common_pointdata_elements_IntPointDataObject");

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->description.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dimensions", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->dimensions);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("intData", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->intData.size()));
    std::vector<int32_t> ::const_iterator _iter23;
    for (_iter23 = this->intData.begin(); _iter23 != this->intData.end(); ++_iter23)
    {
      xfer += oprot->writeI32((*_iter23));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(com_raytheon_uf_common_pointdata_elements_IntPointDataObject &a, com_raytheon_uf_common_pointdata_elements_IntPointDataObject &b) {
  using ::std::swap;
  swap(a.description, b.description);
  swap(a.dimensions, b.dimensions);
  swap(a.intData, b.intData);
  swap(a.__isset, b.__isset);
}

const char* com_raytheon_uf_common_pointdata_elements_LongPointDataObject::ascii_fingerprint = "135921A65C05459AFDDA382E27DDA225";
const uint8_t com_raytheon_uf_common_pointdata_elements_LongPointDataObject::binary_fingerprint[16] = {0x13,0x59,0x21,0xA6,0x5C,0x05,0x45,0x9A,0xFD,0xDA,0x38,0x2E,0x27,0xDD,0xA2,0x25};

uint32_t com_raytheon_uf_common_pointdata_elements_LongPointDataObject::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->description.read(iprot);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dimensions);
          this->__isset.dimensions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->longData.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->longData.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += iprot->readI64(this->longData[_i28]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.longData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t com_raytheon_uf_common_pointdata_elements_LongPointDataObject::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("com_raytheon_uf_common_pointdata_elements_LongPointDataObject");

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->description.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dimensions", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->dimensions);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("longData", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->longData.size()));
    std::vector<int64_t> ::const_iterator _iter29;
    for (_iter29 = this->longData.begin(); _iter29 != this->longData.end(); ++_iter29)
    {
      xfer += oprot->writeI64((*_iter29));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(com_raytheon_uf_common_pointdata_elements_LongPointDataObject &a, com_raytheon_uf_common_pointdata_elements_LongPointDataObject &b) {
  using ::std::swap;
  swap(a.description, b.description);
  swap(a.dimensions, b.dimensions);
  swap(a.longData, b.longData);
  swap(a.__isset, b.__isset);
}

const char* com_raytheon_uf_common_pointdata_PointDataThriftContainer::ascii_fingerprint = "8E622421D449B7CCD34FF11BE324DA19";
const uint8_t com_raytheon_uf_common_pointdata_PointDataThriftContainer::binary_fingerprint[16] = {0x8E,0x62,0x24,0x21,0xD4,0x49,0xB7,0xCC,0xD3,0x4F,0xF1,0x1B,0xE3,0x24,0xDA,0x19};

uint32_t com_raytheon_uf_common_pointdata_PointDataThriftContainer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->floatData.clear();
            uint32_t _size30;
            ::apache::thrift::protocol::TType _etype33;
            xfer += iprot->readListBegin(_etype33, _size30);
            this->floatData.resize(_size30);
            uint32_t _i34;
            for (_i34 = 0; _i34 < _size30; ++_i34)
            {
              xfer += this->floatData[_i34].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.floatData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->intData.clear();
            uint32_t _size35;
            ::apache::thrift::protocol::TType _etype38;
            xfer += iprot->readListBegin(_etype38, _size35);
            this->intData.resize(_size35);
            uint32_t _i39;
            for (_i39 = 0; _i39 < _size35; ++_i39)
            {
              xfer += this->intData[_i39].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.intData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->longData.clear();
            uint32_t _size40;
            ::apache::thrift::protocol::TType _etype43;
            xfer += iprot->readListBegin(_etype43, _size40);
            this->longData.resize(_size40);
            uint32_t _i44;
            for (_i44 = 0; _i44 < _size40; ++_i44)
            {
              xfer += this->longData[_i44].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.longData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->stringData.clear();
            uint32_t _size45;
            ::apache::thrift::protocol::TType _etype48;
            xfer += iprot->readListBegin(_etype48, _size45);
            this->stringData.resize(_size45);
            uint32_t _i49;
            for (_i49 = 0; _i49 < _size45; ++_i49)
            {
              xfer += this->stringData[_i49].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.stringData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t com_raytheon_uf_common_pointdata_PointDataThriftContainer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("com_raytheon_uf_common_pointdata_PointDataThriftContainer");

  xfer += oprot->writeFieldBegin("floatData", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->floatData.size()));
    std::vector<com_raytheon_uf_common_pointdata_elements_FloatPointDataObject> ::const_iterator _iter50;
    for (_iter50 = this->floatData.begin(); _iter50 != this->floatData.end(); ++_iter50)
    {
      xfer += (*_iter50).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("intData", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->intData.size()));
    std::vector<com_raytheon_uf_common_pointdata_elements_IntPointDataObject> ::const_iterator _iter51;
    for (_iter51 = this->intData.begin(); _iter51 != this->intData.end(); ++_iter51)
    {
      xfer += (*_iter51).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("longData", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->longData.size()));
    std::vector<com_raytheon_uf_common_pointdata_elements_LongPointDataObject> ::const_iterator _iter52;
    for (_iter52 = this->longData.begin(); _iter52 != this->longData.end(); ++_iter52)
    {
      xfer += (*_iter52).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stringData", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->stringData.size()));
    std::vector<com_raytheon_uf_common_pointdata_elements_StringPointDataObject> ::const_iterator _iter53;
    for (_iter53 = this->stringData.begin(); _iter53 != this->stringData.end(); ++_iter53)
    {
      xfer += (*_iter53).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(com_raytheon_uf_common_pointdata_PointDataThriftContainer &a, com_raytheon_uf_common_pointdata_PointDataThriftContainer &b) {
  using ::std::swap;
  swap(a.floatData, b.floatData);
  swap(a.intData, b.intData);
  swap(a.longData, b.longData);
  swap(a.size, b.size);
  swap(a.stringData, b.stringData);
  swap(a.__isset, b.__isset);
}

const char* com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint::ascii_fingerprint = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
const uint8_t com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint::binary_fingerprint[16] = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

uint32_t com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->constraintType);
          this->__isset.constraintType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->parameter);
          this->__isset.parameter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint");

  xfer += oprot->writeFieldBegin("constraintType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->constraintType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameter", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->parameter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint &a, com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint &b) {
  using ::std::swap;
  swap(a.constraintType, b.constraintType);
  swap(a.parameter, b.parameter);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

const char* com_raytheon_uf_common_pointdata_PointDataRequestMessage::ascii_fingerprint = "781EA3AAB5B079D92C9DA7774B669520";
const uint8_t com_raytheon_uf_common_pointdata_PointDataRequestMessage::binary_fingerprint[16] = {0x78,0x1E,0xA3,0xAA,0xB5,0xB0,0x79,0xD9,0x2C,0x9D,0xA7,0x77,0x4B,0x66,0x95,0x20};

uint32_t com_raytheon_uf_common_pointdata_PointDataRequestMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->allLevels);
          this->__isset.allLevels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->constraints.clear();
            uint32_t _size54;
            ::apache::thrift::protocol::TType _etype57;
            xfer += iprot->readListBegin(_etype57, _size54);
            this->constraints.resize(_size54);
            uint32_t _i58;
            for (_i58 = 0; _i58 < _size54; ++_i58)
            {
              xfer += this->constraints[_i58].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.constraints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelParameter);
          this->__isset.levelParameter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->levelValue.clear();
            uint32_t _size59;
            ::apache::thrift::protocol::TType _etype62;
            xfer += iprot->readListBegin(_etype62, _size59);
            this->levelValue.resize(_size59);
            uint32_t _i63;
            for (_i63 = 0; _i63 < _size59; ++_i63)
            {
              xfer += iprot->readDouble(this->levelValue[_i63]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.levelValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->parameters.clear();
            uint32_t _size64;
            ::apache::thrift::protocol::TType _etype67;
            xfer += iprot->readListBegin(_etype67, _size64);
            this->parameters.resize(_size64);
            uint32_t _i68;
            for (_i68 = 0; _i68 < _size64; ++_i68)
            {
              xfer += iprot->readString(this->parameters[_i68]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pluginName);
          this->__isset.pluginName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t com_raytheon_uf_common_pointdata_PointDataRequestMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("com_raytheon_uf_common_pointdata_PointDataRequestMessage");

  xfer += oprot->writeFieldBegin("allLevels", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->allLevels);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("constraints", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->constraints.size()));
    std::vector<com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint> ::const_iterator _iter69;
    for (_iter69 = this->constraints.begin(); _iter69 != this->constraints.end(); ++_iter69)
    {
      xfer += (*_iter69).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("levelParameter", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->levelParameter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("levelValue", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->levelValue.size()));
    std::vector<double> ::const_iterator _iter70;
    for (_iter70 = this->levelValue.begin(); _iter70 != this->levelValue.end(); ++_iter70)
    {
      xfer += oprot->writeDouble((*_iter70));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameters.size()));
    std::vector<std::string> ::const_iterator _iter71;
    for (_iter71 = this->parameters.begin(); _iter71 != this->parameters.end(); ++_iter71)
    {
      xfer += oprot->writeString((*_iter71));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pluginName", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->pluginName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(com_raytheon_uf_common_pointdata_PointDataRequestMessage &a, com_raytheon_uf_common_pointdata_PointDataRequestMessage &b) {
  using ::std::swap;
  swap(a.allLevels, b.allLevels);
  swap(a.constraints, b.constraints);
  swap(a.levelParameter, b.levelParameter);
  swap(a.levelValue, b.levelValue);
  swap(a.parameters, b.parameters);
  swap(a.pluginName, b.pluginName);
  swap(a.__isset, b.__isset);
}


