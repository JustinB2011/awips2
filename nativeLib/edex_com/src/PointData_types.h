/*****************************************************************************************
 * COPYRIGHT (c), 2009, RAYTHEON COMPANY
 * ALL RIGHTS RESERVED, An Unpublished Work
 *
 * RAYTHEON PROPRIETARY
 * If the end user is not the U.S. Government or any agency thereof, use
 * or disclosure of data contained in this source code file is subject to
 * the proprietary restrictions set forth in the Master Rights File.
 *
 * U.S. GOVERNMENT PURPOSE RIGHTS NOTICE
 * If the end user is the U.S. Government or any agency thereof, this source
 * code is provided to the U.S. Government with Government Purpose Rights.
 * Use or disclosure of data contained in this source code file is subject to
 * the "Government Purpose Rights" restriction in the Master Rights File.
 *
 * U.S. EXPORT CONTROLLED TECHNICAL DATA
 * Use or disclosure of data contained in this source code file is subject to
 * the export restrictions set forth in the Master Rights File.
 ******************************************************************************************/

/*
 * Support for point data request capability to retrieve point data
 * from EDEX Thrift service.
 *
 * <pre>
 *
 * SOFTWARE HISTORY
 *
 * Date         Ticket#     Engineer    Description
 * ------------ ----------  ----------- --------------------------
 * 01/18/10     3747        brockwoo    Initial Creation
 *
 * </pre>
 *
 * @author brockwoo
 * @version 1
 */

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef PointData_TYPES_H
#define PointData_TYPES_H

#include <Thrift.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





class com_raytheon_uf_common_pointdata_ParameterDescription {
 public:

  static const char* ascii_fingerprint; // = "F8914BAC237E22C5EFA279EDDBA3C5C6";
  static const uint8_t binary_fingerprint[16]; // = {0xF8,0x91,0x4B,0xAC,0x23,0x7E,0x22,0xC5,0xEF,0xA2,0x79,0xED,0xDB,0xA3,0xC5,0xC6};

  com_raytheon_uf_common_pointdata_ParameterDescription() : dimension(""), dimensionAsInt(0), fillValue(0), maxLength(0), numDims(0), parameterName(""), unit("") {
  }

  virtual ~com_raytheon_uf_common_pointdata_ParameterDescription() throw() {}

  std::string dimension;
  int32_t dimensionAsInt;
  double fillValue;
  int32_t maxLength;
  int32_t numDims;
  std::string parameterName;
  std::string unit;

  struct __isset {
    __isset() : dimension(false), dimensionAsInt(false), fillValue(false), maxLength(false), numDims(false), parameterName(false), unit(false) {}
    bool dimension;
    bool dimensionAsInt;
    bool fillValue;
    bool maxLength;
    bool numDims;
    bool parameterName;
    bool unit;
  } __isset;

  bool operator == (const com_raytheon_uf_common_pointdata_ParameterDescription & rhs) const
  {
    if (!(dimension == rhs.dimension))
      return false;
    if (!(dimensionAsInt == rhs.dimensionAsInt))
      return false;
    if (!(fillValue == rhs.fillValue))
      return false;
    if (!(maxLength == rhs.maxLength))
      return false;
    if (!(numDims == rhs.numDims))
      return false;
    if (!(parameterName == rhs.parameterName))
      return false;
    if (!(unit == rhs.unit))
      return false;
    return true;
  }
  bool operator != (const com_raytheon_uf_common_pointdata_ParameterDescription &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const com_raytheon_uf_common_pointdata_ParameterDescription & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class com_raytheon_uf_common_pointdata_elements_StringPointDataObject {
 public:

  static const char* ascii_fingerprint; // = "8432CD88CCBAE483EB61F9210360E5F9";
  static const uint8_t binary_fingerprint[16]; // = {0x84,0x32,0xCD,0x88,0xCC,0xBA,0xE4,0x83,0xEB,0x61,0xF9,0x21,0x03,0x60,0xE5,0xF9};

  com_raytheon_uf_common_pointdata_elements_StringPointDataObject() : dimensions(0) {
  }

  virtual ~com_raytheon_uf_common_pointdata_elements_StringPointDataObject() throw() {}

  com_raytheon_uf_common_pointdata_ParameterDescription description;
  int32_t dimensions;
  std::vector<std::string>  stringData;

  struct __isset {
    __isset() : description(false), dimensions(false), stringData(false) {}
    bool description;
    bool dimensions;
    bool stringData;
  } __isset;

  bool operator == (const com_raytheon_uf_common_pointdata_elements_StringPointDataObject & rhs) const
  {
    if (!(description == rhs.description))
      return false;
    if (!(dimensions == rhs.dimensions))
      return false;
    if (!(stringData == rhs.stringData))
      return false;
    return true;
  }
  bool operator != (const com_raytheon_uf_common_pointdata_elements_StringPointDataObject &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const com_raytheon_uf_common_pointdata_elements_StringPointDataObject & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class com_raytheon_uf_common_pointdata_elements_FloatPointDataObject {
 public:

  static const char* ascii_fingerprint; // = "3E090BC5D21490BE0856576B426175A4";
  static const uint8_t binary_fingerprint[16]; // = {0x3E,0x09,0x0B,0xC5,0xD2,0x14,0x90,0xBE,0x08,0x56,0x57,0x6B,0x42,0x61,0x75,0xA4};

  com_raytheon_uf_common_pointdata_elements_FloatPointDataObject() : dimensions(0) {
  }

  virtual ~com_raytheon_uf_common_pointdata_elements_FloatPointDataObject() throw() {}

  com_raytheon_uf_common_pointdata_ParameterDescription description;
  int32_t dimensions;
  std::vector<int32_t>  floatData;
  std::vector<float> trueFloatData;

  struct __isset {
    __isset() : description(false), dimensions(false), floatData(false) {}
    bool description;
    bool dimensions;
    bool floatData;
  } __isset;

  bool operator == (const com_raytheon_uf_common_pointdata_elements_FloatPointDataObject & rhs) const
  {
    if (!(description == rhs.description))
      return false;
    if (!(dimensions == rhs.dimensions))
      return false;
    if (!(floatData == rhs.floatData))
      return false;
    return true;
  }
  bool operator != (const com_raytheon_uf_common_pointdata_elements_FloatPointDataObject &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const com_raytheon_uf_common_pointdata_elements_FloatPointDataObject & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class com_raytheon_uf_common_pointdata_elements_IntPointDataObject {
 public:

  static const char* ascii_fingerprint; // = "3E090BC5D21490BE0856576B426175A4";
  static const uint8_t binary_fingerprint[16]; // = {0x3E,0x09,0x0B,0xC5,0xD2,0x14,0x90,0xBE,0x08,0x56,0x57,0x6B,0x42,0x61,0x75,0xA4};

  com_raytheon_uf_common_pointdata_elements_IntPointDataObject() : dimensions(0) {
  }

  virtual ~com_raytheon_uf_common_pointdata_elements_IntPointDataObject() throw() {}

  com_raytheon_uf_common_pointdata_ParameterDescription description;
  int32_t dimensions;
  std::vector<int32_t>  intData;

  struct __isset {
    __isset() : description(false), dimensions(false), intData(false) {}
    bool description;
    bool dimensions;
    bool intData;
  } __isset;

  bool operator == (const com_raytheon_uf_common_pointdata_elements_IntPointDataObject & rhs) const
  {
    if (!(description == rhs.description))
      return false;
    if (!(dimensions == rhs.dimensions))
      return false;
    if (!(intData == rhs.intData))
      return false;
    return true;
  }
  bool operator != (const com_raytheon_uf_common_pointdata_elements_IntPointDataObject &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const com_raytheon_uf_common_pointdata_elements_IntPointDataObject & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class com_raytheon_uf_common_pointdata_elements_LongPointDataObject {
 public:

  static const char* ascii_fingerprint; // = "135921A65C05459AFDDA382E27DDA225";
  static const uint8_t binary_fingerprint[16]; // = {0x13,0x59,0x21,0xA6,0x5C,0x05,0x45,0x9A,0xFD,0xDA,0x38,0x2E,0x27,0xDD,0xA2,0x25};

  com_raytheon_uf_common_pointdata_elements_LongPointDataObject() : dimensions(0) {
  }

  virtual ~com_raytheon_uf_common_pointdata_elements_LongPointDataObject() throw() {}

  com_raytheon_uf_common_pointdata_ParameterDescription description;
  int32_t dimensions;
  std::vector<int64_t>  longData;

  struct __isset {
    __isset() : description(false), dimensions(false), longData(false) {}
    bool description;
    bool dimensions;
    bool longData;
  } __isset;

  bool operator == (const com_raytheon_uf_common_pointdata_elements_LongPointDataObject & rhs) const
  {
    if (!(description == rhs.description))
      return false;
    if (!(dimensions == rhs.dimensions))
      return false;
    if (!(longData == rhs.longData))
      return false;
    return true;
  }
  bool operator != (const com_raytheon_uf_common_pointdata_elements_LongPointDataObject &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const com_raytheon_uf_common_pointdata_elements_LongPointDataObject & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class com_raytheon_uf_common_pointdata_PointDataThriftContainer {
 public:

  static const char* ascii_fingerprint; // = "1FBB5099264525B0793D6869D0E4CD21";
  static const uint8_t binary_fingerprint[16]; // = {0x1F,0xBB,0x50,0x99,0x26,0x45,0x25,0xB0,0x79,0x3D,0x68,0x69,0xD0,0xE4,0xCD,0x21};

  com_raytheon_uf_common_pointdata_PointDataThriftContainer() : size(0) {
  }

  virtual ~com_raytheon_uf_common_pointdata_PointDataThriftContainer() throw() {}

  std::vector<com_raytheon_uf_common_pointdata_elements_FloatPointDataObject>  floatData;
  std::vector<com_raytheon_uf_common_pointdata_elements_IntPointDataObject>  intData;
  std::vector<com_raytheon_uf_common_pointdata_elements_LongPointDataObject>  longData;
  int32_t size;
  std::vector<com_raytheon_uf_common_pointdata_elements_StringPointDataObject>  stringData;

  struct __isset {
    __isset() : floatData(false), intData(false), longData(false), size(false), stringData(false) {}
    bool floatData;
    bool intData;
    bool longData;
    bool size;
    bool stringData;
  } __isset;

  bool operator == (const com_raytheon_uf_common_pointdata_PointDataThriftContainer & rhs) const
  {
    if (!(floatData == rhs.floatData))
      return false;
    if (!(intData == rhs.intData))
      return false;
    if (!(longData == rhs.longData))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(stringData == rhs.stringData))
      return false;
    return true;
  }
  bool operator != (const com_raytheon_uf_common_pointdata_PointDataThriftContainer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const com_raytheon_uf_common_pointdata_PointDataThriftContainer & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

  com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint() : constraintType(0), parameter(""), value("") {
  }

  virtual ~com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint() throw() {}

  int32_t constraintType;
  std::string parameter;
  std::string value;

  struct __isset {
    __isset() : constraintType(false), parameter(false), value(false) {}
    bool constraintType;
    bool parameter;
    bool value;
  } __isset;

  bool operator == (const com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint & rhs) const
  {
    if (!(constraintType == rhs.constraintType))
      return false;
    if (!(parameter == rhs.parameter))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class com_raytheon_uf_common_pointdata_PointDataRequestMessage {
 public:

  static const char* ascii_fingerprint; // = "781EA3AAB5B079D92C9DA7774B669520";
  static const uint8_t binary_fingerprint[16]; // = {0x78,0x1E,0xA3,0xAA,0xB5,0xB0,0x79,0xD9,0x2C,0x9D,0xA7,0x77,0x4B,0x66,0x95,0x20};

  com_raytheon_uf_common_pointdata_PointDataRequestMessage() : allLevels(0), levelParameter(""), pluginName("") {
  }

  virtual ~com_raytheon_uf_common_pointdata_PointDataRequestMessage() throw() {}

  bool allLevels;
  std::vector<com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint>  constraints;
  std::string levelParameter;
  std::vector<double>  levelValue;
  std::vector<std::string>  parameters;
  std::string pluginName;

  struct __isset {
    __isset() : allLevels(false), constraints(false), levelParameter(false), levelValue(false), parameters(false), pluginName(false) {}
    bool allLevels;
    bool constraints;
    bool levelParameter;
    bool levelValue;
    bool parameters;
    bool pluginName;
  } __isset;

  bool operator == (const com_raytheon_uf_common_pointdata_PointDataRequestMessage & rhs) const
  {
    if (!(allLevels == rhs.allLevels))
      return false;
    if (!(constraints == rhs.constraints))
      return false;
    if (!(levelParameter == rhs.levelParameter))
      return false;
    if (!(levelValue == rhs.levelValue))
      return false;
    if (!(parameters == rhs.parameters))
      return false;
    if (!(pluginName == rhs.pluginName))
      return false;
    return true;
  }
  bool operator != (const com_raytheon_uf_common_pointdata_PointDataRequestMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const com_raytheon_uf_common_pointdata_PointDataRequestMessage & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
