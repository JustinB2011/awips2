#! /bin/ksh
# purge_hpe_files
# This script purges HPE (High-resolution Precipitation Estimator) files
# according to retention period requirements. 

# David T. Miller   RSIS    OHD/HSEB
# October 30 2007 (adapted from purge_mpe_files)
# April 15, 2014  Add DualPol radar data DSA and DPR

# This allows you to run this script from outside of ./whfs/bin
RUN_FROM_DIR=`dirname $0`

# set up SOme environment variables for WHFS applications
. $RUN_FROM_DIR/../../set_hydro_env

export DSP_LOG_DIR=$(get_apps_defaults dsp_log_dir)
export DHR_LOG_DIR=$(get_apps_defaults dhr_log_dir)
export HPE_LOG_DIR=$(get_apps_defaults hpe_log_dir)
export PPROC_LOCAL_DATA=$(get_apps_defaults pproc_local_data)

HPELOGS=$HPE_LOG_DIR

hpe_purge_error=`date -u +error_hpepurge.%Y%m%d%H%M%S`

if [[ -d $HPELOGS ]]
then
# set errorlog 

   errorlog=$HPELOGS/$hpe_purge_error

# GAD_DIR is directory which holds the gad program (get_apps_defaults.LX)

#
#  get purge file settings

   LOGAGE=`get_apps_defaults hpe_purge_logage`
   FILEAGE=`get_apps_defaults hpe_purge_fileage`
   XMRGAGE=`get_apps_defaults hpe_purge_xmrgage`

# set defaults should the tokens above be missing or set incorrectly
   
   if [[ $LOGAGE -le 0 ]]
   then
      LOGAGE=720
   fi
   
   if [[ $FILEAGE -le 0 ]]
   then
      FILEAGE=180
   fi

   if [[ $XMRGAGE -le 0 ]]
   then
      XMRGAGE=75
   fi

# remove empty error logs
   
   if [[ ! -s $errorlog ]]
   then
     rm -f $errorlog
   fi
   
   Dte=`date -u`

   # Setup file names
   #
   fnm=$HPELOGS/purge_hpe_files.log
   tmp=$HPELOGS/purge_hpe_files.tmp

echo `basename $0` log location: $fnm

   # Save only the latest events in the log file
   #
if [ -e "${fnm}" ]
then
	tail -1200 $fnm > $tmp
	mv $tmp $fnm
	chmod 777 $fnm
fi
   

   # Log a header line to the output file
   #
   echo "----------------------------------------------------" >> $fnm
   echo "Begin purge_hpe_files at:  " $Dte >> $fnm
   
else
   echo "HPE log directory $HPELOGS incorrect " >> $errorlog
   echo "Check .Apps_defaults and set_hydro_env for correctness " >> $errorlog
   echo "purge_hpe_files exiting with error " >> $errorlog
   exit 1
fi

# Note that the line below is the way this should be established
# However, since files are being purged, best to hard code to ensure
# that the files to be deleted are the correct ones

#HPE_OUTPUT_DIR=$PPROC_LOCAL_DATA/hpe       
HPE_OUTPUT_DIR=${apps_dir}/precip_proc/local/data/hpe       

if [[ -d $HPE_OUTPUT_DIR ]]
then
   HPEHEIGHT=$HPE_OUTPUT_DIR/height
   HPEINDEX=$HPE_OUTPUT_DIR/index
   HPEDHRMOSAIC=$HPE_OUTPUT_DIR/dhrmosaic
   HPEERMOSAIC=$HPE_OUTPUT_DIR/ermosaic
   HPEEBMOSAIC=$HPE_OUTPUT_DIR/ebmosaic
   HPEBDHRMOSAIC=$HPE_OUTPUT_DIR/bdhrmosaic
   HPEAVGMOSAIC=$HPE_OUTPUT_DIR/avgrmosaic
   HPEMAXMOSAIC=$HPE_OUTPUT_DIR/maxrmosaic
   HPENOWCAST=$HPE_OUTPUT_DIR/nowcast


   HPEDHRGRIB=$HPEDHRMOSAIC/grib
   HPEDHRNETCDF=$HPEDHRMOSAIC/netcdf
   HPEDHRGIF=$HPEDHRMOSAIC/gif

   HPEBDHRGRIB=$HPEBDHRMOSAIC/grib
   HPEBDHRNETCDF=$HPEBDHRMOSAIC/netcdf
   HPEBDHRGIF=$HPEBDHRMOSAIC/gif

   HPEERGRIB=$HPEERMOSAIC/grib
   HPEERNETCDF=$HPEERMOSAIC/netcdf
   HPEERGIF=$HPEERMOSAIC/gif

   HPEEBGRIB=$HPEEBMOSAIC/grib
   HPEEBNETCDF=$HPEEBMOSAIC/netcdf
   HPEEBGIF=$HPEEBMOSAIC/gif
else
   echo "HPE directory $HPE_OUTPUT_DIR  not valid.  " >> $fnm
   echo "Check for correct directory name " >> $fnm

   echo "Check .Apps_defaults settings or set_hydro_env script" >> $fnm

   echo "Exiting purge_hpe_files with error at:  " $Dte >> $fnm

   exit 1
fi   
   

DHRXMRG=${apps_dir}/precip_proc/local/data/dhr_decoded
DHRARCHIVE=${apps_dir}/precip_proc/local/data/dhr_archive
DHRERROR=${apps_dir}/precip_proc/local/data/dhr_error


DSPXMRG=${apps_dir}/precip_proc/local/data/dsp_decoded
DSPARCHIVE=${apps_dir}/precip_proc/local/data/dsp_archive
DSPERROR=${apps_dir}/precip_proc/local/data/dsp_error

# Dual Pol DPR and DSA products 
DPRXMRG=${apps_dir}/precip_proc/local/data/dpr_decoded
DSAXMRG=${apps_dir}/precip_proc/local/data/dsa_decoded

# Note kept these lines in case there's enough confidence to 
# use the $PPROC_LOCAL_DATA value
# But with purging, must ensure what's purged is what was 
# meant to be.

#DHRXMRG=$PPROC_LOCAL_DATA/dhr_decoded
#DHRARCHIVE=$PPROC_LOCAL_DATA/dhr_archive
#DHRERROR=$PPROC_LOCAL_DATA/dhr_error


#DSPXMRG=$PPROC_LOCAL_DATA/dsp_decoded
#DSPARCHIVE=$PPROC_LOCAL_DATA/dsp_archive
#DSPERROR=$PPROC_LOCAL_DATA/dsp_error

# Purge hpe log files generated by hpe_fieldgen
# 

echo " " >> $fnm
echo "   hpe_fieldgen log files   " >> $fnm

if [[ -d $HPELOGS && -n "$HPELOGS" ]]
then
   find $HPELOGS -type f -name 'HPE*' -mmin +$LOGAGE -print -exec rm {} \;  \
   >> $fnm
   find $HPELOGS -type f -name 'error.*' -mmin +$LOGAGE -print -exec rm {} \;  \
   >> $fnm
   find $HPELOGS -type f -name 'print.*' -mmin +$LOGAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "HPE LOG DIR not valid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" >> $fnm
   exit 1
fi

if [[ -d $DHR_LOG_DIR && -n "$DHR_LOG_DIR" ]]
then
   find $DHR_LOG_DIR -type f -name 'decodedhr*' -mmin +$LOGAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "DHR LOG DIR not valid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" >> $fnm
#   exit 1   
fi

if [[ -d $DSP_LOG_DIR && -n "$DSP_LOG_DIR" ]]
then  
   find $DSP_LOG_DIR -type f -name 'decodedsp*' -mmin +$LOGAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "DSP LOG DIR not valid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" >> $fnm
#   exit 1   
fi

#Purge hpe gridded field files 
#

echo " " >> $fnm
echo "   hpe gridded field files   " >> $fnm

if [[ -d $HPEHEIGHT && -n "$HPEHEIGHT" ]]
then  
   find $HPEHEIGHT -type f -name '*HEIGHT*z' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "HPE height directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" >> $fnm
#   exit 1   
fi

if [[ -d $HPEINDEX && -n "$HPEINDEX" ]]
then  
   find $HPEINDEX -type f -name '*INDEX*z' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "HPE index directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" >> $fnm
#   exit 1   
fi

if [[ -d $HPEDHRMOSAIC && -n "$HPEDHRMOSAIC" ]]
then  
   find $HPEDHRMOSAIC -type f -name 'DHRMOSAIC*z' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "HPE DHR Mosaic directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" >> $fnm
#   exit 1   
fi

if [[ -d $HPEBDHRMOSAIC && -n "$HPEBDHRMOSAIC" ]]
then  
   find $HPEBDHRMOSAIC -type f -name 'BDHRMOSAIC*z' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "HPE Bias DHR Mosaic directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" >> $fnm
#   exit 1   
fi

if [[ -d $HPEERMOSAIC && -n "$HPEERMOSAIC" ]]
then  
   find $HPEERMOSAIC -type f -name 'ERMOSAIC*z' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "HPE ER Mosaic directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" >> $fnm
#   exit 1   
fi

if [[ -d $HPEAVGMOSAIC && -n "$HPEAVGMOSAIC" ]]
then  
   find $HPEAVGMOSAIC -type f -name 'AVGRMOSAIC*z' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "HPE AVG Mosaic directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" >> $fnm
#   exit 1   
fi

if [[ -d $HPEMAXMOSAIC && -n "$HPEMAXMOSAIC" ]]
then  
   find $HPEMAXMOSAIC -type f -name 'MAXRMOSAIC*z' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "HPE MAX Mosaic directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" >> $fnm
#   exit 1   
fi

if [[ -d $HPEEBMOSAIC && -n "$HPEEBMOSAIC" ]]
then  
   find $HPEEBMOSAIC -type f -name 'EBMOSAIC*z' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "HPE EB Mosaic directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" >> $fnm
#   exit 1   
fi
if [[ -d $HPENOWCAST && -n "$HPENOWCAST" ]]
then
   find $HPENOWCAST -type f -name 'BPRT*z' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
   find $HPENOWCAST -type f -name 'BPRT*z.grib' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm

   find $HPENOWCAST -type f -name 'PRT*z' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
   find $HPENOWCAST -type f -name 'PRT*z.grib' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm

   find $HPENOWCAST -type f -name 'ACC*z' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
   find $HPENOWCAST -type f -name 'ACC*z.grib' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm

   find $HPENOWCAST -type f -name 'BACC*z' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
   find $HPENOWCAST -type f -name 'BACC*z.grib' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm


else
   echo "HPE Nowcast directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" >> $fnm
#   exit 1
fi


if [[ -d $HPEDHRGRIB && -n "$HPEDHRGRIB" ]]
then  
   find $HPEDHRGRIB -type f -name 'DHRMOSAIC*.grib' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "HPE DHR Mosaic GRIB directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" \
   >> $fnm
#   exit 1   
fi

if [[ -d $HPEDHRNETCDF && -n "$HPEDHRNETCDF" ]]
then  
   find $HPEDHRNETCDF -type f -name 'DHRMOSAIC*.nc' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "HPE DHR Mosaic NetCDF directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" \
   >> $fnm
#   exit 1   
fi

if [[ -d $HPEDHRGIF && -n "$HPEDHRGIF" ]]
then  
   find $HPEDHRGIF -type f -name 'DHRMOSAIC*.gif' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "HPE DHR Mosaic GIF directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" \
   >> $fnm
#   exit 1   
fi

if [[ -d $HPEBDHRGRIB && -n "$HPEBDHRGRIB" ]]
then  
   find $HPEBDHRGRIB -type f -name 'BDHRMOSAIC*.grib' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "HPE Bias DHR Mosaic GRIB directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" \
   >> $fnm
#   exit 1   
fi

if [[ -d $HPEBDHRNETCDF && -n "$HPEBDHRNETCDF" ]]
then  
   find $HPEBDHRNETCDF -type f -name 'BDHRMOSAIC*.nc' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "HPE Bias DHR Mosaic NetCDF directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" \
   >> $fnm
#   exit 1   
fi

if [[ -d $HPEBDHRGIF && -n "$HPEBDHRGIF" ]]
then  
   find $HPEBDHRGIF -type f -name 'BDHRMOSAIC*.gif' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "HPE Bias DHR Mosaic GIF directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" \
   >> $fnm
#   exit 1   
fi

if [[ -d $HPEERGRIB && -n "$HPEERGRIB" ]]
then  
   find $HPEERGRIB -type f -name 'ERMOSAIC*.grib' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
   find $HPEERGRIB -type f -name 'AVGRMOSAIC*.grib' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
   find $HPEERGRIB -type f -name 'MAXRMOSAIC*.grib' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm

else
   echo "HPE ER Mosaic GRIB directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" \
   >> $fnm
#   exit 1   
fi

if [[ -d $HPEERNETCDF && -n "$HPEERNETCDF" ]]
then  
   find $HPEERNETCDF -type f -name 'ERMOSAIC*.nc' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
   find $HPEERNETCDF -type f -name 'AVGRMOSAIC*.nc' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
   find $HPEERNETCDF -type f -name 'MAXRMOSAIC*.nc' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm

else
   echo "HPE ER Mosaic NetCDF directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" \
   >> $fnm
#   exit 1   
fi

if [[ -d $HPEERGIF && -n "$HPEERGIF" ]]
then  
   find $HPEERGIF -type f -name 'ERMOSAIC*.gif' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
   find $HPEERGIF -type f -name 'AVGRMOSAIC*.gif' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
   find $HPEERGIF -type f -name 'MAXRMOSAIC*.gif' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm

else
   echo "HPE ER Mosaic GIF directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" \
   >> $fnm
#   exit 1   
fi

if [[ -d $HPEEBGRIB && -n "$HPEEBGRIB" ]]
then  
   find $HPEEBGRIB -type f -name 'EBMOSAIC*.grib' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "HPE EB Mosaic GRIB directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" \
   >> $fnm
#   exit 1   
fi

if [[ -d $HPEEBNETCDF && -n "$HPEEBNETCDF" ]]
then  
   find $HPEEBNETCDF -type f -name 'EBMOSAIC*.nc' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "HPE EB Mosaic NetCDF directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" \
   >> $fnm
#   exit 1   
fi

if [[ -d $HPEEBGIF && -n "$HPEEBGIF" ]]
then  
   find $HPEEBGIF -type f -name 'EBMOSAIC*.gif' -mmin +$FILEAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "HPE EB Mosaic GIF directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" \
   >> $fnm
#   exit 1   
fi

if [[ -d $DHRXMRG && -n "$DHRXMRG" ]]
then  
   find $DHRXMRG -type f -name 'DHR*Z' -mmin +$XMRGAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "DHR XMRG directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" \
   >> $fnm
#   exit 1   
fi

if [[ -d $DSPXMRG && -n "$DSPXMRG" ]]
then  
   find $DSPXMRG -type f -name 'DSP*Z' -mmin +$XMRGAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "DSP XMRG directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" \
   >> $fnm
#   exit 1   
fi

if [[ -d $DSAXMRG && -n "$DSAXMRG" ]]
then  
   find $DSAXMRG -type f -name 'DSA*Z' -mmin +$XMRGAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "DSA XMRG directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" \
   >> $fnm
#   exit 1   
fi

if [[ -d $DPRXMRG && -n "$DPRXMRG" ]]
then  
   find $DPRXMRG -type f -name 'DPR*Z' -mmin +$XMRGAGE -print -exec rm {} \;  \
   >> $fnm
else
   echo "DPR XMRG directory invalid.  " >> $fnm
   echo "Check .Apps_defaults settings or set_hydro_env script" \
   >> $fnm
#   exit 1   
fi

Dte=`date -u`
echo "End   purge_hpe_files at:  " $Dte >> $fnm

exit 0

#End of purge_hpe_files
