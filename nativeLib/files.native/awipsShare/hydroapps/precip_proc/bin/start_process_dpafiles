#!/bin/ksh
# =========================================================================
#  start_process_dpafiles - script to start up the process_dpafiles process
# =========================================================================

# This allows you to call this script from outside of ./bin
RUN_FROM_DIR=`dirname $0`

# set up SOME environment variables for AWIPS Team applications
. $RUN_FROM_DIR/../../set_hydro_env
export DPA_PROD_DIR=$(get_apps_defaults dpa_prod_dir)
export PPROC_BIN=$(get_apps_defaults pproc_bin)
export SHEFDECODE_USERID=$(get_apps_defaults shefdecode_userid)
export DPA_ERROR_DIR=$(get_apps_defaults dpa_error_dir)
export DPA_LOG_DIR=$(get_apps_defaults dpa_log_dir)
export WHFS_BIN_DIR=$(get_apps_defaults whfs_bin_dir)
 
# First check to see if the user trying to start process is 
# allowed to do it

if [[ $SHEFDECODE_USERID = "" ]]
then
  print The user allowed to start the decoders has not been assigned.
  print " "Please assign a user id to the 'shefdecode_userid' 
  print " "token for the get_apps_defaults process.
  exit -1
fi

if [ $LOGNAME != $SHEFDECODE_USERID ]
then
  print User $LOGNAME is not allowed to start process_dpafiles.
  print " "Only user $SHEFDECODE_USERID can start this process.
  exit -2
fi

 
#  get the directory specifications

DATA_DIR=$DPA_PROD_DIR
LOG_DIR=$DPA_LOG_DIR
ERR_DIR=$DPA_ERROR_DIR
BIN_DIR1=$PPROC_BIN
BIN_DIR2=$WHFS_BIN_DIR
 
# Check to see if directories exist

if [[ ! -d $DATA_DIR ]]
then
  print "Directory specified for data files does not exist " $DATA_DIR
  exit -3 
fi

if [[ ! -d $LOG_DIR ]]
then
  print "Directory specified for log files does not exist " $LOG_DIR
  exit -4 
fi

if [[ ! -d $ERR_DIR ]]
then
  print "Directory specified for error files does not exist " $ERR_DIR
  exit -5 
fi

if [[ ! -d $BIN_DIR1 ]]
then
  print "Directory specified for executables does not exist " $BIN_DIR1
  exit -6 
fi

if [[ ! -d $BIN_DIR2 ]]
then
  print "Directory specified for executables does not exist " $BIN_DIR2
  exit -7 
fi

   
   
# define the log file name

LOG_NAME=`date -u +process_dpa_log_%m%d`
LOG_FILE=$LOG_DIR/$LOG_NAME


# Announce startup of process_dpafiles

print ========================================================  >> $LOG_FILE
print Starting process_dpafiles at $(date -u) >> $LOG_FILE
print ========================================================  >> $LOG_FILE
print "   "  >> $LOG_FILE


# Remove stop flag file if it exists

rm -f $DATA_DIR/stop_dpadecode    


# Start script in background
# note that ihe script requires arguments
 
$BIN_DIR1/process_dpafiles $DATA_DIR $LOG_DIR $ERR_DIR $BIN_DIR1 $BIN_DIR2 >> $LOG_FILE &
