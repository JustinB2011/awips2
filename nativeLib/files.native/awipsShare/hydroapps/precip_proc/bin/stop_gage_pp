#!/bin/ksh
# ============================================================
#   stop_gage_pp - script to stop the gage_pp process
#
#   This script will return one of the following completion codes
#   to the operating system indicating success or failure of its
#   attempt to stop the Gage Precip Processor.
#
#   0     The attempt to stop the Gage Precip Processor was successful.
#   1     An invalid command line argument has been passed into this script.
#   2     The gage_pp_userid token is not defined.
#   3     The user is not allowed to stop the Gage Precip Processor.  
#   4     The directory specified for the data files does not exist.
#   5     The Gage Precip Process is not running. There is no process to stop.
#   6     The Gage Precip Processor log directory has not been defined.
#   7     The Gage Precip Processor cannot be stopped from this system.
#         Check the gage_pp_host token for the valid system name.
#
#   Revision History
#   Moria Shebsovich         July 7, 2004           Created.
# ============================================================
#
# This allows you to call this script from outside of ./bin
HOSTNAME=`hostname`
RUN_FROM_DIR=`dirname $0`

#
# set up SOME environment variables for AWIPS Team applications
. $RUN_FROM_DIR/../../set_hydro_env
export GAGE_PP_USERID=$(get_apps_defaults gage_pp_userid)
export GAGE_PP_HOST=$(get_apps_defaults gage_pp_host)
export GAGE_PP_DATA=$(get_apps_defaults gage_pp_data)
export GAGE_PP_LOG=$(get_apps_defaults gage_pp_log)

GAGE_PP_LOG_DIR=$GAGE_PP_LOG
if [[ ! -d $GAGE_PP_LOG_DIR ]]
then
    print "Directory specified for log files does not exist " $GAGE_PP_LOG_DIR
    exit 6
fi

#
# define the Gage Precip Processor daily log file name
LOGFILE=`date +gage_pp_log_%m%d`
GAGE_PP_LOG_FILE=$GAGE_PP_LOG_DIR/$LOGFILE

# Check to see which system the Gage Precip Processor is allowed 
# to be stopped from.
# This is specified by the gage_pp_host token which is represented
# by the GAGE_PP_HOST variable set in set_hydro_env.
# If this script is not being run on that system, then log an error message.

COMPARISON_STRING=`echo $HOSTNAME $GAGE_PP_HOST | awk -F' ' 'match ($1, $2)'`
if test -z "$COMPARISON_STRING"
then

   print "Gage Precip Processor cannot be stopped from '$HOSTNAME'" \
         "It can only be stopped from '$GAGE_PP_HOST'." >> $GAGE_PP_LOG_FILE
   exit 7

fi

#
# Check to see if the user trying to stop process is the one
# allowed to do it

if [[ $GAGE_PP_USERID = "" ]]
   then
      print stop_gage_pp: User allowed to stop gage_pp has not \
            been assigned. >> $GAGE_PP_LOG_FILE
      print " "Please assign a user id to the \
            'gage_pp_userid' >> $GAGE_PP_LOG_FILE
      print " "token for the get_apps_defaults process.
            >> $GAGE_PP_LOG_FILE
      exit 2
fi

if [ $LOGNAME != $GAGE_PP_USERID ]
   then
      print stop_gage_pp: User $LOGNAME is not allowed to stop \
             Gage Precip Processor. >> $GAGE_PP_LOG_FILE
      print " "Only user $GAGE_PP_USERID can stop \
            Gage Precip Processor! >> $GAGE_PP_LOG_FILE
      exit 3
fi

#  Check to determine if the Gage Precip Processor is running before 
#  an attempt is made to stop it.

export PIDFILE=$GAGE_PP_DATA/gage_pp_pid.dat
export FILEPID=`cat $PIDFILE`

if [[ $FILEPID  != "" ]]
then
  ps -p $FILEPID | grep gage_pp > /dev/null 2>&1
  if [ $? -eq 1 ]
  then
     print "stop_gage_pp: GagePP is not running." >> $GAGE_PP_LOG_FILE
     exit 5
  fi

fi

#
#  touch the stop file, which the gage_pp program checks for
#  and if it exists, then it initiates an orderly abort of the system

touch $GAGE_PP_DATA/stop_gage_pp


