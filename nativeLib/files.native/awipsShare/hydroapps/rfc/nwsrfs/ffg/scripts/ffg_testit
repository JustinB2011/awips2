#!/bin/ksh

# script to test the Flash Flood Guidance System programs

# find set_hydro_env and initialize the environment
prev_dir=`pwd`
env_file="set_hydro_env"
while [ ! -e ${env_file} ]
do
	cd ..
	if [ "/" = "`pwd`" ]
	then
		break
	fi
done
. ${env_file}
cd ${prev_dir}

set +o xtrace

          #####################################################################
          ## Variable "TesPgmLis" is required by other scripts to determine
          ##  which programs are used by this script.
          #####################################################################
 
TesPgmLis="
           zgrid prodgen ffguid
          "

# get script name
scrname=${0##*/}
#print "scrname=$scrname"

# set commands to execute if interrupt signal encountered
signal=2
trap " \
      set +o xtrace ; \
      print 'NOTE: in $scrname - interrupt encountered.' ; \
      set +o xtrace ; \
      xexit 0 $scrname ; exit 0 ; \
      " \
     $signal

xscrhdr () {
   print "Script $scrname started."
   }

xscrtlr () {
   print "Script $scrname ended."
   }

xexit () {
   print "Script $scrname ended."
   }

xrunning () {
   print "RUNNING: $string"
   }
   
# function to set the Development System build level
xsetbuild () {
   read ans?"Enter build level or <RETURN> for $DS_BUILD: "  
   #set -o xtrace
   if [ "$ans" != "" ] ; then
      ido=1
      while [ $ido = 1 ] ; do
         if [ "$ans" = "ob2" -o "$ans" = "2" -o \
              "$ans" = "ob3" -o "$ans" = "3" -o \
              "$ans" = "ob4" -o "$ans" = "4" ] ; then
            if [[ $ans = [1-9]* ]] ; then
               ans="ob$ans"
               fi
            set -o xtrace
            export DS_BUILD=$ans
            set +o xtrace
            ido=0
            else
               print "ERROR: '$ans' is an invalid build level."
               read ans?"Enter build level or <RETURN> for $DS_BUILD: " 
               if [ "$ans" = "" ] ; then
                  ido=0
                  fi 
            fi
         done
      fi
   }

# function to check if to continue execution.
xcontinue () {
#set -o xtrace
# set prefix for options
optprefix="-"

allval_f=
chkval_f=yes
prtstr_f=
quitval_f=

#print "command line arguments: $*"

# check number of command line arguments
if [ $# -gt 0 ] ; then
   ichkval_f=
   iprtstr_f=
   iquitval_f= 
   while [ "$1" != "" ] ; do
      #set -o xtrace
   # check for optional dash
      option=${1##$optprefix}
      if [ "$option" = "" ] ; then
         option=$1
         fi
   # get option name
      option=${option%%=*}
      if [ "$option" = "" ] ; then
         option=$1
         fi
      option=${option##*=}
      #print "option=$option"
   # get value for option
      #value=${1##*=}
      value=${1#*=}
      #print "value=$value"
      if [ "$value" = "$option" ] ; then
         value=
         fi
      ioption=0
   # check option name
      if [[ $option = all* ]] ; then
         allval_f=$value
         iallval_f=1
         ioption=1
         fi
      if [[ $option = chk* ]] ; then
         if [[ $value = y* || $value = n* ]] ; then
            chkval_f=$value
            ichkval_f=1
            else
               print "WARNING: in $funcname - '$value' is an invalid $option value."
            fi
         ioption=1
         fi
      if [[ $option = command ]] ; then
         command=$value
         ioption=1
         fi
      if [[ $option = prt* ]] ; then
         prtstr_f=$value
         #print "prtstr_f=$prtstr_f"
         iprtstr_f=1
         ioption=1
         fi
      if [[ $option = quit* ]] ; then
         quitval_f=$value
         iquitstr_f=1
         ioption=1
         fi    
      if [ $ioption = 0 -a "$iprtstr" = "" ] ; then
         prtstr_f=$option
         iprtstr_f=1
         ioption=1
         fi
      if [ $ioption = 0 -a "$iallval" = "" ] ; then
         allval_f=$option
         iallval_f=1
         ioption=1
         fi
      if [ $ioption = 0 -a "$ichkval" = "" ] ; then
         chkval_f=$option
         ichkval_f=1
         ioption=1
         fi
      if [ $ioption = 0 -a "$iquitkval" = "" ] ; then
         quitval_f=$option
         iquitval_f=1
         fi               
      if [ $ioption = 0 ] ; then
         print "ERROR: '$option' is an invalid option."
         fi
      shift
      done
   fi
   
#print prtstr_f=$prtstr_f
#print chkval_f=$chkval_f
#print quitval_f=$quitval_f

#set -o xtrace

if [ "$prtstr_f" = "" ] ; then
   prtstr_f="Okay to continue"
   fi

ireturn_f=
   
while [ "$ireturn_f" = "" ] ; do
   if [ "$command" != "" ] ; then
      print "$prtstr_f"
      eval $command
      print -n "(<RETURN> for ${chkval_f})? "
      else
         print -n "$prtstr_f (<RETURN> for ${chkval_f})? "
      fi
   read ans?
   if [[ "$ans" = "" ]] ; then 
      if [[ $chkval_f = n* ]] ; then
         ireturn_f=0
         fi
      if [[ $chkval_f = N* ]] ; then
         ireturn_f=0
         fi
      if [[ $chkval_f = y* ]] ; then
         ireturn_f=1
         fi
      if [[ $chkval_f = Y* ]] ; then
         ireturn_f=1
         fi
      fi
   if [[ $ans = n* ]] ; then
      ireturn_f=0
      fi
   if [[ $ans = N* ]] ; then
      ireturn_f=0
      fi
   if [[ $ans = y* ]] ; then   
      ireturn_f=1
      fi
   if [[ $ans = Y* ]] ; then   
      ireturn_f=1
      fi
   if [ "$quitval_f" != "" ] ; then
      if [ "$ans" = "$quitval_f" ] ; then   
         ireturn_f=2
         fi
      fi
   if [ "$allval_f" != "" ] ; then
      if [ "$ans" = "$allval_f" ] ; then   
         ireturn_f=3
         fi
      fi   
   if [ "$ireturn_f" = "" ] ; then
      print "ERROR: '$ans' is invalid. Valid values are 'yes' or 'no'."
      #ireturn_f=0
      fi
   done

#print "ireturn_f=$ireturn_f"
 
set +o xtrace
return $ireturn_f
set +o xtrace
}

# print script header
xscrhdr $scrname $pid

# set build level for running programs
xsetbuild

# set build level for comparing files
default=$DS_BUILD
ido=1
while [ $ido = 1 ] ; do
   read ans?"Enter build level for comparing files or <RETURN> for $default: "
   if [ "$ans" = "" ] ; then
      ds_build_compare=$default
      else
         ds_build_compare=$ans
      fi
   compdir=$(get_apps_defaults ffg_dir)/output/ofstest/$ds_build_compare
   #print "compdir=$compdir"
   if [ ! -d $compdir ] ; then
      print "ERROR: directory $compdir not found."
      #set -o xtrace
      string=ob
      buildnum=${default##*$string}
      let buildnum=$buildnum-1
      default=$string$buildnum
      ds_build_compare=$default
      continue
      fi
   ido=0
   done
print "NOTE: directory $compdir will be used for comparing files."

# check operating system 
if [ "$(uname)" = "Linux" ] ; then
   unamez=lx
   moreopt="-d"
   redir="1> "
   else
      unamez=hp
      moreopt="-d -e"
      redir="2> "
   fi
#print "moreopt=$moreopt"

outdir=$PWD
#outdir=$HOME/$scrname

#ffguser=ofstest_new
ffguser=ffg_testit_new
#ofsuser=ofstest
ofsuser=ffg_testit
ifpuser=ofstest

# set environment values
#set -o xtrace
export ffg_level=$ffguser
export ofs_level=$ofsuser
export ifp_rfc=$ifpuser
export ffg_out_dir=$outdir/_prod
export ffg_grib_out=$outdir/_grib
ffg_files=$(get_apps_defaults ffg_files)
ofs_files=$(get_apps_defaults ofs_files)
ffg_duty_fcstr="."
#export $ffg_duty_fcst
set +o xtrace
print "ffg_level=$(get_apps_defaults ffg_level)"
print "ofs_level=$(get_apps_defaults ofs_level)"
print "ifp_rfc=$(get_apps_defaults ifp_rfc)"
print "ffg_files=$ffg_files"
print "ffg_ffgfiles=$(get_apps_defaults ffg_files)/$ffg_level"
print "ffg_dir=$(get_apps_defaults ffg_dir)"
print "ffg_out_dir=$(get_apps_defaults ffg_out_dir)"
print "ffg_grib_out=$(get_apps_defaults ffg_grib_out)"
print "ffg_dir=$(get_apps_defaults ffg_dir)"
#print "ffg_duty_fcstr=$(get_apps_defaults ffg_duty_fcstr)"
print "ofs_files=$ofs_files"
print "ofs_fs5files=$(get_apps_defaults ofs_fs5files)"

#set -o xtrace
iexit=0
if [ ! -d $ffg_files ] ; then
   #print "ERROR: ffg_files $ffg_files not found."
   #iexit=1
   set -o xtrace
   mkdir -p $ffg_files
   set +o xtrace
   else
      dirname=$ffg_files/$ffg_level
      if [ ! -d $dirname ] ; then
         #print "ERROR: dirname $dirname not found."
         #iexit=1
         set -o xtrace
         mkdir -p $dirname
         set +o xtrace
         fi
   fi
if [ ! -d $ofs_files ] ; then
   print "ERROR: ofs_files $ofs_files not found."
   iexit=1
   else
      dirname=$ofs_files/$ofs_level
      if [ ! -d $dirname ] ; then
         print "ERROR: dirname $dirname not found."
         iexit=1
         fi
   fi
if [ $iexit = 1 ] ; then
   xexit 0 $scrname ; exit 0
   fi

filename_errors=${scrname}_errors
filename_warnings=${scrname}_warnings

zfilesize () {
# check file sizes
  for filename in * ; do
     if [ ! -s $filename ] ; then
        print "WARNING: file $filename is a zero length file."
        fi
     done
  }
  
#zfilesize ; xcontinue

dir_separator="#"
file_separator="="

zseparator () {
   nrepeat=100
   line=
   ncount=0
   #char="#"
   char=$1
   while [ $ncount -lt $nrepeat ] ; do
      let ncount=$ncount+1
      line="$line$char"
      done
   print "" >> $filename_compare
   print "$line" >> $filename_compare
   }
   
zgrep () {
   #set -o xtrace
   string="grep"
   xcontinue -prtstr="Okay to run '$string' to check output files for errors and warning" -chkstr=yes
   condcode=$?
   if [ $condcode = 1 ] ; then
      suffix=$1
      grepfile=${filename_errors}$suffix
      #set -o xtrace
      string="grep "ERROR:"   $filenames > $grepfile"
      xrunning "$string"
      eval $string
      if [ -s $grepfile ] ; then
         string="vi $grepfile"
         xcontinue -prtstr="Okay to run '$string'"
         condcode=$?
         if [ $condcode = 1 ] ; then
            set -o xtrace
            vi $grepfile
            set +o xtrace
            fi
        else
           print "NOTE: no errors found."
        fi
      grepfile=${filename_warnings}$suffix
      string="grep "WARNING:" $filenames > $grepfile"
      xrunning "$string"
      eval $string
      if [ -s $grepfile ] ; then
         string="vi $grepfile"
         xcontinue -prtstr="Okay to run '$string'"
         condcode=$?
         if [ $condcode = 1 ] ; then
            set -o xtrace
            vi $grepfile
            set +o xtrace
            fi
        else
           print "NOTE: no warnings found."
        fi
      set +o xtrace
      fi
   }

#filenames="ffguid* prodgen* zgrid*" ; zgrep ; xcontinue

zcompare () {
# compare files
   cmdname="diff"
   xcontinue -prtstr="Okay to run '$cmdname' to compare output files" -chkstr=yes
   condcode=$?
   if [ $condcode = 1 ] ; then
      compdir=$(get_apps_defaults ffg_dir)/output/ofstest/$ds_build_compare
      if [ ! -d $compdir ] ; then
         print "ERROR: directory $compdir not found."
         else
            options="-b -w"                     # ignore white space
            filename_comparez=${scrname}_compare
            filename_compare=$PWD/$filename_comparez
            if [ -f $filename_compare ] ; then
               rm $filename_compare
               fi
            #set -o xtrace
            new_filenames=@.$scrname.new.filenames
            old_filenames=@.$scrname.old.filenames
            sedstr="/$new_filenames/d"
            sedstr="$sedstr ; /$old_filenames/d"
            sedstr="$sedstr ; /$filename_errors*/d"
            sedstr="$sedstr ; /$filename_warnings*/d"
            sedstr="$sedstr ; /$filename_comparez*/d"
            #print "sedstr=$sedstr"
            ls $PWD | sed "$sedstr" > $new_filenames
            ls $compdir | sed "$sedstr" > $old_filenames
            print "BEGIN COMPARING DIRECTORIES:" >> $filename_compare
            print "    $PWD" >> $filename_compare
            print "AND" >> $filename_compare
            print "    $compdir:" >> $filename_compare
            string="diff $new_filenames $old_filenames"
            xrunning "$string"
            $string >> $filename_compare
            rm $new_filenames $old_filenames
            print "END COMPARING DIRECTORIES" >> $filename_compare
            #sedstr="/\/fs\/awips/d"             # delete lines with pathname
            #sedstr="$sedstr ; /\/fs\/hseb/d"    # delete lines with pathname
            sedstr="$sedstr ; /RUN DATE=/d"     # delete lines with run date
            sedstr="$sedstr ; /RUN DATE = /d"   # delete lines with run date
            for filename in * ; do
               #print "filename=$filename"
               if [ "$filename" = "$new_filenames" -o \
                    "$filename" = "$old_filenames" -o \
                    "$filename" = "$filename_errors" -o \
                    "$filename" = "$filename_warnings" -o \
                    "$filename" = "$filename_comparez" ] ; then
                  print "NOTE: skipping file /$PWD/$filename."
                  print "NOTE: skipping file /$PWD/$filename." >> $filename_compare
                  continue
                  fi
               file1=$PWD/$filename
               #print "file1=$file1"
               file2=$compdir/$filename
               #print "file2=$file2"
               if [ -f $file1 ] ; then
                  string="FILES"
                  stringz=$file_separator
                  else
                     string="DIRECTORIES"
                     stringz=$dir_separator
                  fi
               zseparator $stringz
               if [ -f $file1 ] ; then
                  if [ ! -f $file2 ] ; then
                     print "ERROR: file $file2 not found."
                     print "ERROR: file $file2 not found." >> $filename_compare
                     continue
                     fi
                  fi
               print "BEGIN COMPARING $string:" >> $filename_compare
               print "    $file1" >> $filename_compare
               print "AND" >> $filename_compare
               print "    $file2:" >> $filename_compare
               if [ ! -d $file1 ] ; then
                  string="$cmdname $options $file1 $file2"
                  xrunning "$string"
                  $string |
                     sed "$sedstr" >> $filename_compare
                  else
                     cd $filename
                     for filenamez in * ; do
                        #print "filenamez=$filenamez"
                        iskip=0
                        if [[ $filenamez = ${scrname}*ffg ]] ; then
                           iskip=1
                           fi
                        if [[ $filenamez = *$ffguser*[0-9]* ]] ; then
                           iskip=1
                           fi
                        if [ $iskip = 1 ] ; then
                           print "NOTE: skipping file $PWD/$filenamez."
                           print "NOTE: skipping file $PWD/$filenamez." >> $filename_compare
                           continue
                           fi
                        file1=$PWD/$filenamez
                        #print "file1=$file1"
                        file2=$compdir/$filename/$filenamez
                        #print "file2=$file2"
                        if [ -f $file1 ] ; then
                           string="FILES"
                           stringz=$file_separator
                           else
                              string="DIRECTORIES"
                              stringz=$dir_separator
                           fi
                        zseparator $stringz
                        if [ -f $file1 ] ; then
                           if [ ! -f $file2 ] ; then
                              print "ERROR: file $file2 not found."
                              print "ERROR: file $file2 not found." >> $filename_compare
                              continue
                              fi
                           fi
                        print "BEGIN COMPARING $string:" >> $filename_compare
                        print "    $file1" >> $filename_compare
                        print "AND" >> $filename_compare
                        print "    $file2:" >> $filename_compare
                        string="$cmdname $options $file1 $file2"
                        xrunning "$string"
                        $string |
                           sed "$sedstr" >> $filename_compare
                        done
                     print "END COMPARING DIRECTORIES" >> $filename_compare
                     cd -
                  fi
               set +o xtrace
               done
            print "END COMPARING FILES" >> $filename_compare
            string="vi $filename_compare"
            xcontinue -prtstr="Okay to run '$string'"
            condcode=$?
            if [ $condcode = 1 ] ; then
               set -o xtrace
               vi $filename_compare
               set +o xtrace
               fi
            fi
     fi
   }

#zcompare ; xcontinue
   
#set -o xtrace

default=dvl
#string="dvl, mgr, rls, arc"
string="dvl, rls, arc"
read using?"Enter $string or <RETURN> for $default: "
if [ "$using" = "" ] ; then
   using=$default
   fi

iexit=0

# set program pathname
if [[ $using = d* ]] ; then
   progpath=$(get_apps_defaults my_rls)
   fi
if [[ $using = m* ]] ; then
   progpath=$(get_apps_defaults mgr_rls)
   fi
if [[ $using = r* ]] ; then
   progpath=$(get_apps_defaults ffg_rls)
   fi
if [[ $using = a* ]] ; then
   progpath=$(get_apps_defaults ffg_arc)
   fi
if [ ! -d $progpath ] ; then
   print "ERROR: directory $progpath not found."
   iexit=1
   else
      print "NOTE: progpath is $progpath."
   fi

# set directory for definition input file
ffgdir_define=$(get_apps_defaults ffg_files)/$ofsuser/define
if [ ! -d $ffgdir_define ] ; then
   print "ERROR: directory $ffgdir_define not found."
   iexit=1
   fi
   
# set directory for definition output files
ffgdir_files=$(get_apps_defaults ffg_files)/$ffguser

if [ $iexit = 1 ] ; then
   xexit 0 $scrname ; exit 0
   fi

xcontinue
condcode=$?
if [ $condcode = 0 ] ; then
   xexit 0 $scrname ; exit 0
   fi

#set -o xtrace

# check if to delete output files and directories
ideloutdir=1
if [ $ideloutdir = 1 ] ; then
# check if any files found
   dirname=$PWD
   ifound=0
   for filename in * ; do
      if [ -d $filename ] ; then
         ifound=1
         break
         fi
      if [ -f $filename ] ; then
         ifound=1
         break
         fi
      done
   if [ $ifound = 1 ] ; then
      print "WARNING: the following files in $dirname will be deleted:"
      ls -C -1 -l $dirname | sed '/^total /d' | more $moreopt
      xcontinue
      condcode=$?
      if [ $condcode = 1 ] ; then
         #set -o xtrace
         #string="rm prodgen* ffguid* zgrid*"
         #string="rm -r -f $ffg_out_dir"
         #string="rm -r -f $ffg_grib_out"
         string="rm -r -f *"
         xrunning "$string"
         $string
         set +o xtrace
         fi
      fi
   fi

# check if to delete ffg file directory
idelffgdir=1
if [ $idelffgdir = 1 ] ; then
   dirname=$(get_apps_defaults ffg_files)/$ffguser
   if [ -d $dirname ] ; then
#  check if any files found
      cd $dirname
      ifound=0
      for filename in * ; do
         if [ -d $filename ] ; then
            ifound=1
            break
            fi
         if [ -f $filename ] ; then
            ifound=1
            break
            fi
         done
      cd -
      if [ $ifound = 1 ] ; then
         print "WARNING: the following files in $dirname will be deleted:"
         ls -C -1 -l $dirname | sed '/^total /d' | more $moreopt
         xcontinue
         condcode=$?
         if [ $condcode = 1 ] ; then
            #set -o xtrace
            string="rm -r -f $dirname"
            xrunning "$string"
            $string
            set +o xtrace
            fi
         fi
      fi
   fi

# check if need to create output directories
if [ ! -d $ffg_out_dir ] ; then
   set -o xtrace
   mkdir -p $ffg_out_dir
   set +o xtrace
   fi
if [ ! -d $ffg_grib_out ] ; then
   set -o xtrace
   mkdir -p $ffg_grib_out
   set +o xtrace
   fi

blank=" "

zchkffgdir () {
   #print "in zchkffgdir - ffgdir=$ffgdir"
   if [ ! -d $ffgdir ] ; then
      set -o xtrace
      mkdir -p $ffgdir
      set +o xtrace
      fi
   }
   
set -o xtrace

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# run program to assign threshold runoff values by areas to each HRAP bin in 
# the area using the boundary defined for the area

progname=zgrid

export zgrid_file_prefix=$progname

prefix=$progname
prtfile=${prefix}_print ; export ffg_print_filename=$prtfile
logfile=$redir${prefix}_log
set -o xtrace
eval $progpath/$progname << eof > $prtfile $logfile
$blank                          # debug/logfile options
$ffgdir_define/defaffg      # pathname of old area runoff define file
${progname}_defaffg_new         # pathname of new area runoff define file
eof
set +o xtrace

#xcontinue

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# run flash flood guidance computation program

progname=ffguid

# define user controls
type=user
ffgdir=$ffgdir_files/$type
zchkffgdir
prefix=${progname}_setup_${type}
prtfile=${prefix}_print ; export ffg_print_filename=$prtfile
logfile=$redir${prefix}_log
set -o xtrace
eval $progpath/$progname << eof > $prtfile $logfile
s       # Setup
u       # User Controls
f       # file
$ffgdir_define/defuinf
$blank
eof
set +o xtrace

#xcontinue

# define area parameters
type=affg
ffgdir=$ffgdir_files/$type
zchkffgdir
prefix=${progname}_setup_${type}
prtfile=${prefix}_print ; export ffg_print_filename=$prtfile
logfile=$redir${prefix}_log
set -o xtrace
eval $progpath/$progname << eof > $prtfile $logfile
s       # Setup
a       # Areas
c       # change
f       # file
$ffgdir_define/defaffg
$blank
eof
set +o xtrace

#xcontinue

# define grid parameters
type=grro
ffgdir=$ffgdir_files/$type
zchkffgdir
prefix=${progname}_setup_${type}
prtfile=${prefix}_print ; export ffg_print_filename=$prtfile
logfile=$redir${prefix}_log
set -o xtrace
eval $progpath/$progname << eof > $prtfile $logfile
s       # Setup
g       # Grid
f       # file
$ffgdir_define/defgro01
1
yes
$ffgdir_define/defgro03
3
yes
$ffgdir_define/defgro06
6
yes
$ffgdir_define/defgro12
12
yes
$ffgdir_define/defgro24
24
yes
$blank
$blank  # not needed for my_rls version
eof
set +o xtrace

#xcontinue

# define runoff adjust for grids parameters
type=gdpm
ffgdir=$ffgdir_files/$type
zchkffgdir
prefix=${progname}_setup_${type}
prtfile=${prefix}_print ; export ffg_print_filename=$prtfile
logfile=$redir${prefix}_log
set -o xtrace
eval $progpath/$progname << eof > $prtfile $logfile
s       # Setup
r       # Runoff Adjust for Grids
c       # change
f       # file
$ffgdir_define/defgdpm
$blank
eof
set +o xtrace

#xcontinue

# define headwater parameters
type=hffg
ffgdir=$ffgdir_files/$type
zchkffgdir
prefix=${progname}_setup_${type}
prtfile=${prefix}_print ; export ffg_print_filename=$prtfile
logfile=$redir${prefix}_log
set -o xtrace
eval $progpath/$progname << eof > $prtfile $logfile
s       # Setup
h       # Headwaters
c       # change
f       # file
$ffgdir_define/defhffg
$blank
eof
set +o xtrace

#xcontinue

# define water supply parameters
type=wsup
ffgdir=$ffgdir_files/$type
zchkffgdir
prefix=${progname}_setup_${type}
prtfile=${prefix}_print ; export ffg_print_filename=$prtfile
logfile=$redir${prefix}_log
set -o xtrace
eval $progpath/$progname << eof > $prtfile $logfile
s       # Setup
w       # Water Supply
c       # change
f       # file
$ffgdir_define/defwsup
$blank
eof
set +o xtrace

#xcontinue

# output parametric information
set -o xtrace
type=dump
prefix=${progname}_$type
prtfile=${prefix}_print ; export ffg_print_filename=$prtfile
logfile=$redir${prefix}_log
eval $progpath/$progname << eof > $prtfile $logfile
s       # Setup
a       # Areas
l       # list
${progname}_${type}_parm_affg
1       # first
$blank  # last
$blank
$blank
h       # Headwater
l       # list
${progname}_${type}_parm_hffg
1       # first
$blank  # last
$blank
$blank
r       # Runoff Adjust for Grids
l       # list
${progname}_${type}_parm_gdpm
1       # first
$blank  # last
$blank
$blank
u       # User controls
l       # list
${progname}_${type}_parm_uinf
$blank
w       # Water Supply
l       # list
${progname}_${type}_parm_wsup
1       # first
$blank  # last
$blank
$blank
$blank
quit
eof
set +o xtrace

#xcontinue

# create other directories
type=cary
ffgdir=$ffgdir_files/$type
zchkffgdir
type=grff
ffgdir=$ffgdir_files/$type
zchkffgdir

# compute guidance
set -o xtrace
prefix=${progname}_compute
prtfile=${prefix}_print ; export ffg_print_filename=$prtfile
logfile=$redir${prefix}_log
eval $progpath/$progname << eof > $prtfile $logfile
c       # Compute all
$blank
eof
set +o xtrace

#xcontinue

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# run flash flood guidance product generation program

progname=prodgen

type=grpp
ffgdir=$ffgdir_files/$type      # checked for at start of program
zchkffgdir

# define user controls
type=user
ffgdir=$ffgdir_files/$type
zchkffgdir
prefix=${progname}_setup_${type}
prtfile=${prefix}_print ; export ffg_print_filename=$prtfile
logfile=$redir${prefix}_log
set -o xtrace
eval $progpath/$progname << eof > $prtfile $logfile
s       # Setup
u       # User Controls
f       # file
$ffgdir_define/defuinf
$blank
eof
set +o xtrace

#xcontinue

# define products
type=prod
ffgdir=$ffgdir_files/$type
zchkffgdir
prefix=${progname}_setup_${type}
prtfile=${prefix}_print ; export ffg_print_filename=$prtfile
logfile=$redir${prefix}_log
set -o xtrace
eval $progpath/$progname << eof > $prtfile $logfile
s       # Setup
p       # Products
c       # change
f       # file
$ffgdir_define/defprod
$blank
eof
set +o xtrace

#xcontinue

# define groups of products
type=grpp
ffgdir=$ffgdir_files/$type
zchkffgdir
prefix=${progname}_setup_${type}
prtfile=${prefix}_print ; export ffg_print_filename=$prtfile
logfile=$redir${prefix}_log
set -o xtrace
eval $progpath/$progname << eof > $prtfile $logfile
s       # Setup
g       # Groups of Products
c       # change
f       # file
$ffgdir_define/defgrpp
$blank
$blank
eof
set +o xtrace

#xcontinue

# define text parameters
type=text
ffgdir=$ffgdir_files/$type
zchkffgdir
prefix=${progname}_setup_${type}
prtfile=${prefix}_print ; export ffg_print_filename=$prtfile
logfile=$redir${prefix}_log
set -o xtrace
eval $progpath/$progname << eof > $prtfile $logfile
s       # Setup
T       # Text
c       # change
f       # file
$ffgdir_define/deftext
$blank
$blank
eof
set +o xtrace

#xcontinue

# output parametric information
set -o xtrace
type=dump
prefix=${progname}_$type
prtfile=${prefix}_print ; export ffg_print_filename=$prtfile
logfile=$redir${prefix}_log
eval $progpath/$progname << eof > $prtfile $logfile
s       # Setup
p       # Products
l       # list
${progname}_${type}_parm_prod
1       # first
$blank  # last
$blank
$blank
$blank
g       # Groups of Products
l       # list
${progname}_${type}_parm_grpp
1       # first
$blank  # last
$blank
$blank
$blank
t       # Text
l       # list
${progname}_${type}_parm_text
1       # first
$blank  # last
$blank
$blank
$blank
u       # User controls
l       # list
${progname}_${type}_parm_uinf
$blank
$blank
eof
set +o xtrace

#xcontinue

# generate products
prefix=${progname}_generate
prtfile=${prefix}_print ; export ffg_print_filename=$prtfile
logfile=$redir${prefix}_log
set -o xtrace
eval $progpath/$progname << eof > $prtfile $logfile
1       # Generate
$blank
eof
set +o xtrace

#xcontinue

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# check file size
zfilesize

# check files for errors and warnings
filenames="ffguid* prodgen* zgrid*"
zgrep

#xcontinue

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# test using script ffg

irun=1
if [ $irun = 1 ] ; then
   if [[ $using = d* ]] ; then
      using="-b d"    # for my_rls
      fi
   if [[ $using = m* ]] ; then
      using="-b m"   # for mgr_rls
      fi
   if [[ $using = r* ]] ; then
      using=""       # for ffg_rls
      fi
   if [[ $using = a* ]] ; then
      using="-b ma"  # for ffg_arc
      fi
   runopt="auto"  ; progname=${PWD##*/}    # run program using first item on menu
   runopt="chain" ; progname=ffguid        # run program ffguid then prodgen and functions as auto
   logqulf="-q _$ffguser"          # qualifer for [progname][user_qulf].[date] files
   copyopt="-c copy"               # copy files when appending suffix name
   #copyopt="-c move"              # move files when appending suffix name
   append="-a $ffguser"            # append name to message filenames
   #append="-a date"               # append date-time stamp to message filenames
   duty_fcstr="-h $ffg_duty_fcstr" # duty forecaster
   ffgscr="ffg"
   string="$ffgscr -p $progname $using -i $runopt $logqulf $copyopt $append $duty_fcstr"
   xcontinue -prtstr="Okay to run '$string'"
   condcode=$?
   if [ $condcode = 1 ] ; then
      set -o xtrace
      eval $string
      set +o xtrace
      cd $ffg_out_dir
   # check file size
      zfilesize
   # check files for errors and warnings
      filenames="ffguid* prodgen*"
      set +o xtrace
      zgrep "_ffg"
      cd -
      fi
   fi

#xcontinue

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# compare files
zcompare

#xcontinue

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# print script trailer
xscrtlr $scrname $SECONDS

#
