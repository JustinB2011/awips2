#!/bin/ksh
#  ========================================================================
#  pgm: ofs .. run OFS program
#
USAGE="usage:ofs -p pgm [-i in_file] [-o out_file_prefix] [-f fileset] \
[-u user] [-g input_group] [-r reor_set] [-h shefout_file_name] \
[-d] [-m] [-a] [-t] [-x] [-s]"
#
# The only required parameter is the program to be executed indicated by the 
# -p switch.
#---------------------------------------------------------------------------
# All other parameters are optional and will be successfully provided values
# if not supplied on the command line.  However, certain switch values
# become meaningless unless provided with values by the user.  Switches are:
#
# Switch        Description                      Default value
# ------        ------------------------------   --------------------------
#   -i           Input file to be used with        stop
#                program.  File must be
#                located in the appropriate
#                program's input directory.
#
#   -o           Output file prefix or "tty".      "program name"
#                Files are date-time stamped
#                and placed in the user's output
#                directory. If "tty" is given,
#                output goes to the terminal.
#
#   -f           ofs file set override.            The file set indicated
#                                                  by the gad
#                                                  token "ofs_level".
#
#   -g           Input file group override.        The group indicated by the
#                                                  gad token
#                                                  "ofs_inpt_grp"
#
#   -u           User name override.  Used to      Log-in user id ($LOGNAME).
#                place output in output dir.
#                other than the submitting
#                user's.
#
#   -r           Reorder file set override.        The file set indicated
#                                                  by the gad
#                                                  token "ofs_reor_lvl".
#
#   -h           Name of shefout file used as      shefout
#                output from shefpars and as
#                input to shefpost
#
#   -d           Use "development" executable      Use directory indicated
#                directory indicated by the        by the "ofs_rls" token.
#                token "my_rls".
#
#   -a           Use "manager" executable          Use directory indicated
#                directory indicated by the        by the "ofs_rls" token.
#                token "mgr_rls".
#
#   -m           Suppress "info" message           Message will be printed.
#                generation.
#  
#   -t           Have log information displayed    Output into log file.
#                at terminal.
#
#   -x           Conduct execution check only,     Program will be executed.
#                displaying add'l info, but
#                program is not executed.
#
#   -s           Execute program on machine        Execute program on machine
#                designated as ofs_server via      from which ofs command is
#                gad mechanism.      issued.
#---------------------------------------------------------------------------
#  rqd: gad
#
#  ver: 20020122
#===========================================================================

# Change Information
#
# Disable the -s switch for HPs since it doesn't work and the HP is
#  faster anyway. jto - 3/98
#  Update to include ndfd2rfs temperature pre-processor  10/10/04  Edwin
#  Update to put -m back to suppressing messages, and made -c the mgr option
#    no known reason why the -m became mgr, but this returns the script to the
#     configuration in the field  2/3/05  Edwin
#
#===========================================================================

# returns a fully resolved path
get_full_path() {
    cd "$1"
    echo $(pwd)
}

script_dir=$(get_full_path $(dirname $0))

. $script_dir/include_hydro_env.sh

# Make sure the temporary input file is removed at script exit
 
 trap '[ -f "$Tmpfile" ] && /bin/rm $Tmpfile 2>> /dev/null' 0
 
 Dte=$(date -u +%Y%m%d.%H%M%S)

# Umask patch

 umask 002

# On Linux we output log messages to stdout, on HP to stderr:

    [ "`uname`" = Linux ] && Num_actn=1 || Num_actn=2

# Initialize command line parameters

 Pgm_cl=""
 Infil_cl=""
 Otfil_cl=""
 Fl_set_cl=""
 Inpt_grp_cl=""
 User_cl=""
 Reor_cl=""
 Sho_fil_cl=""
 Devl="off"
 Mgr="off"
 Msg_prt="on"
 Redir="on"
 Xqt_pgm="on"
 Remsh_request="off"

# Determine which parameters were entered on the command line

while getopts :p:i:o:f:g:u:r:h:damtxs cl_args
do
  case $cl_args in
      p) Pgm_cl=$OPTARG;;
      i) Infil_cl=$OPTARG;;
      o) Otfil_cl=$OPTARG;;
      f) Fl_set_cl=$OPTARG;;
      u) User_cl=$OPTARG;;
      g) Inpt_grp_cl=$OPTARG;;
      r) Reor_cl=$OPTARG;;
      h) Sho_fil_cl=$OPTARG;;
      d) Devl="on";;
      a) Mgr="on";;
      m) Msg_prt=off;;
      t) Redir="off";;
      x) Xqt_pgm=off;;
      s) [ "`uname`" = HP-UX ] && { Remsh_request="on"; RshCmd="ssh"; }
         [ "`uname`" = Linux ] && { Remsh_request="on"; RshCmd="ssh"; };;
      :) Ms_arg=$OPTARG;;
     \?) bad_sw=YES;;
  esac
done

#  See if command line args were entered properly

bad_cl=0
if [[ $Ms_arg != "" || $bad_sw != ""  || $Pgm_cl = "" ]]
  then
    bad_cl=1
  fi

for Ck_arg in $Pgm_cl $Infil_cl $Otfil_cl $Fl_set_cl $User_cl $Reor_cl \
              $Sho_fil_cl
do
    if [[ $Ck_arg = -[a-zA-Z0-9.] ]]
      then
	bad_cl=1
	break
      fi
done

#  create output directory for user if it doesn't exist

 Usr=${User_cl:-$LOGNAME}
 Out_dir=$(gad ofs_output)/$Usr
 if [[ ! -d $Out_dir ]]
   then

        AccRit=775 
        if [ "$Usr" = ofstest ]; then
           [ "$LOGNAME" = testmgr ] && AccRit=755 || AccRit=555
        fi

     mkdir -p $Out_dir
     chmod $AccRit $Out_dir
   fi

 Pgm=${Pgm_cl:-"No_pgm"}
 Cofil=$Out_dir/$Pgm"_log".$Dte

#  Check to see if messages are to be returned to terminal

 if [[ $Redir = "on" ]]
   then
      Log_actn=">> $Cofil"
   else
      Log_actn=""
   fi

#  Check to see if "informatory" message is to be displayed

 if [[ $Msg_prt = "on" && $Redir = "on" ]]
   then
      print "OFS execution log information will be written to:"
      print " ==> $Cofil <=="
   fi

# Kick out if bad command line arguments entered

if (( $bad_cl == 1 ))
  then
    eval print ============================================================================$Log_actn
    eval print "' '"Stopping OFS script for $Pgm at $(date -u +"%T %Z") on \
	   $(date -u +"%a %b %d %Y") $Log_actn
    eval print "'   $USAGE '" $Log_actn
    eval print ============================================================================$Log_actn
    eval print "''"  $Log_actn
    exit 1
  fi

# Establish key parameters for program execution

 if [[ $Fl_set_cl != "" ]]
   then
     export ofs_level=$Fl_set_cl
   fi

 if [[ $Inpt_grp_cl != "" ]]
   then
     export ofs_inpt_grp=$Inpt_grp_cl
   fi

 if [[ $Reor_cl != "" ]]
   then
     export ofs_reor_lvl=$Reor_cl
   fi


 if [[ $Devl = on ]]
   then
     Ex_dir=$(gad my_rls)
 elif [[ $Mgr = on ]]
   then
     Ex_dir=$(gad    mgr_rls)
   else
     Ex_dir=$(gad    ofs_rls)
   fi
 
##############################################################################
# Added by DHM Team (11/06)...
# add the following jars and so's to the approriate ENV paths for executing DHM through FCST
##############################################################################

 shared_jars=$(gad util_rls)/toolsUI-2.2.12.jar:$(gad util_rls)/jgrapht-0.6.0.jar:$(gad util_rls)/commons-io-1.3.1.jar:$(gad util_rls)/commons-collections-3.1.jar
 util_nwsrfs_jars=$(gad util_rls)/ofs.jar:$(gad util_rls)/dhm.jar:$(gad util_rls)/rdhmutilities.jar:$(gad util_rls)/distrouting.jar

 export CLASSPATH=$shared_jars:$util_nwsrfs_jars
 export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(gad util_rls):$(gad sys_java_dir)/lib/i386:$(gad sys_java_dir)/lib/i386/native_threads:$(gad sys_java_dir)/lib/i386/client
      
 In_dir=$(gad    ofs_input)/$Pgm
 Shef_dir=$(gad  ofs_shefdata_dir)
 Sho_dir=$(gad   ofs_shefout_dir)


##############################################################################
# Added by Hank Herr (12/4/01)...
# If the Pgm is convert_espts, then I need to change the Ex_dir to point to
# the scripts directory.  I also need a different Num_actn.
##############################################################################
if [[ $Pgm = "convert_griddb" ]]
then
    Ex_dir="$(gad ofs_scripts)"
    Num_actn=2
fi
 
# Check to see if program exists at exec directory

 if [[ ! -a $Ex_dir/$Pgm || ! -f $Ex_dir/$Pgm || ! -x $Ex_dir/$Pgm ]]
   then
     eval print ============================================================================$Log_actn
     eval print "' '"Stopping OFS script for $Pgm at $(date -u +"%T %Z") on \
	   $(date -u +"%a %b %d %Y") $Log_actn
     eval print "'  ==> '"$Ex_dir/$Pgm"' <=='"  $Log_actn
     eval print "' '"does not exist, is not a file, or is not executable. $Log_actn
     eval print ============================================================================$Log_actn
     eval print "''"  $Log_actn
     exit 1
 fi

# Establish file names that can be used by any OFS program

 Inflx=${Infil_cl:-stop}
 Infil=$In_dir/$Inflx

if [[ $Otfil_cl = tty ]]; then
  Otflx=tty
  Otfil=tty
  Otfil_actn=""
 else
  Otflx=${Otfil_cl:-$Pgm}.$Dte
  Otfil=$Out_dir/$Otflx
  Otfil_actn="> $Otfil"
fi

 Pufil=$Out_dir/$Pgm"_pun".$Dte
 Shofl=${Sho_fil_cl:-shefout}
 X1fil=$Out_dir/$Pgm"_unit1".$Dte
 X8fil=$Out_dir/$Pgm"_unit8".$Dte
 X9fil=$Out_dir/$Pgm"_unit9".$Dte
 X97fil=$Out_dir/$Pgm"_unit97".$Dte
 Tmpfile=/tmp/${0##*/}.$LOGNAME.$$

 if [[ $Pgm = shefpars || $Pgm = shefpost ]]
   then
     Inflx=$Pgm.in
     Infil=$In_dir/$Inflx
     Xxfil=$Sho_dir/$Shofl
     if [[ $Pgm = shefpars ]]
       then
	 Shflx=${Infil_cl:-shin}
	 Shfil=$Shef_dir/$Shflx

	 # Check to see if SHEF input file exists as a file
	 #   and is not empty

	 if [[ ! -a $Shfil || ! -f $Shfil || ! -s $Shfil ]]
	   then
eval print ============================================================================$Log_actn
	   eval print "' '"Stopping OFS script for $Pgm at $(date -u +"%T %Z") on\
		   $(date -u +"%a %b %d %Y") $Log_actn
	   eval print "'  ==> '"$Shfil"' <=='"  $Log_actn
	   eval print "' '"does not exist, is not a file, or is empty. $Log_actn
eval print ============================================================================$Log_actn
	   eval print "''"  $Log_actn
	   exit 1
	   fi

       fi
   fi

# Check to see if input file exists as a file and is not empty.
# Note, skip this section if program "ndfd2rfs" is used.

if [[ $Pgm != ndfd2rfs ]]
  then
 if [[ ! -a $Infil || ! -f $Infil || ! -s $Infil  ]]
   then
eval print ============================================================================$Log_actn
     eval print "' '"Stopping OFS script at $(date -u +"%T %Z") on \
	   $(date -u +"%a %b %d %Y") $Log_actn
     eval print "'  ==> '"$Infil"' <=='"  $Log_actn
     eval print "' '"does not exist, is not a file, or is empty. $Log_actn
eval print ============================================================================$Log_actn
     eval print "''"  $Log_actn
     exit 1
 fi


# Take tabs out of input file:
#          ... routine "tab_out" MUST EXIST in the user environment
#          ... use "if [[ "`uname -s`" = "AIX" ]]; then" if only IBM usage

     if grep -l '	' "$Infil" >/dev/null; then
       tab_out $Infil ${Infil}_temp    \
         && mv ${Infil}_temp $Infil    \
         || rm -f ${Infil}_temp
       [ "$LOGNAME" = testmgr ] && chmod 644 $Infil || chmod 664 $Infil
     fi

fi  # end of if on ndfd
#
# See if request made to execute program on ofs_server
#

This_cpu=$(hostname | cut -f1 -d".")
##=## Xqt_prefix='$Ex_dir/$Pgm < $Tmpfile $Otfil_actn'

if [[ $Remsh_request = "on" ]]
  then
   ofs_server=$(gad ofs_server)
   ofs_server_defined="no"

# Can't do remote execution if g_a_d token not defined.

   if [[ $ofs_server != "" ]]
     then
       ofs_server_defined="yes"

# See if we're already on ofs_server, and
#  if not, see if we can remsh to that box.

       if [[ $This_cpu != $ofs_server ]]
         then
           eval $RshCmd $ofs_server -n date >> /dev/null 2>> /dev/null
           remsh_code=$?
           if (( $remsh_code == 0 ))
             then
               lvl=$(gad ofs_level)
##=##          Xqt_prefix='remsh $ofs_server -n \"{ export ofs_level=$lvl; $Ex_dir/$Pgm < $Tmpfile $Otfil_actn; }\"'
               valid_request="yes"
             else
               valid_request="no"
             fi
         fi
     fi
  fi
 
eval print ============================================================================$Log_actn
if [[ $Xqt_pgm = "on" ]]
   then
eval print "' '"Starting OFS program execution at $(date -u +"%T %Z") on \
$(date -u +"%a %b %d %Y") $Log_actn
else 
eval print "' '"Starting OFS execution check at $(date -u +"%T %Z") on \
$(date -u +"%a %b %d %Y") $Log_actn
fi

eval print "'   OFS command issued on:    '"$This_cpu   $Log_actn
eval print "'   Program to be executed:   '"$Pgm        $Log_actn

if [[ $Remsh_request = "off" ]]
  then
eval print "'    Local execution on:      '"$This_cpu   $Log_actn

  else
eval print "'    Remote exec requested.   '"           $Log_actn
    if [[ $This_cpu = $ofs_server ]]
      then
eval print "'     This cpu is ofs server. '"            $Log_actn
eval print "'    Local execution on:      '"$This_cpu   $Log_actn
      else
        if [[ $ofs_server_defined = "no" ]]
          then
eval print "'     OFS Server not defined. '"            $Log_actn
eval print "'    Local execution on:      '"$This_cpu   $Log_actn
          else
            if [[ $valid_request = "no" ]]
              then
eval print "'     Cannot execute on:      '"$ofs_server $Log_actn
eval print "'    Local execution on:      '"$This_cpu   $Log_actn
              else
eval print "'    Remote execution on:     '"$ofs_server $Log_actn
              fi
          fi
      fi
  fi

eval print "'   Executable directory:     '"$Ex_dir   $Log_actn
eval print "'   Input file:               '"$Inflx    $Log_actn
eval print "'   Input directory:          '"$In_dir   $Log_actn
eval print "'   Output file:              '"$Otflx    $Log_actn
eval print "'   Output directory:         '"$Out_dir  $Log_actn
if [[ $Pgm = shefpars ]]
  then
    eval print "'   SHEF file:                '"$Shflx    $Log_actn
    eval print "'   SHEF directory:           '"$Shef_dir $Log_actn
  fi
eval print ============================================================================$Log_actn

# Execute OFS program, unless "execute program" switch is off

if [[ $Xqt_pgm = "on" ]]
   then

##############################################################################
# Added by Hank Herr (12/4/01)...
# The convert_griddb runs differently than the others, so I'll handle it
# in a special way right here.
##############################################################################
if [[ $Pgm = convert_griddb ]]
then
    # execute the pgm
    eval $Ex_dir/$Pgm $In_dir/$Inflx > $Out_dir/$Otflx $Num_actn$Log_actn
    exit 0
fi
##############################################################################

##############################################################################
# Added by Edwin Welles...
# 
##############################################################################
if [[ $Pgm = ndfd2rfs ]]
then
    # execute the wrapper script
    scr_Dir=$(get_apps_defaults ofs_scripts)
    # execute the pgm
    eval $scr_Dir/${Pgm}.ksh $Out_dir/$Otflx $Num_actn$Log_actn
    exit 0
fi
##############################################################################

# Set up temporary file for use in input redirection
#  for program execution

if [[ $Pgm = fcst ]]; then
cat > $Tmpfile <<EOF
$Infil
$Otfil
$X1fil
$X8fil
$X9fil
$X97fil
EOF

elif [[ $Pgm = espinit ]]; then
cat > $Tmpfile <<EOF
$Infil
$Otfil
$Pufil
$X9fil
EOF

elif [[ $Pgm = reorder ]]; then
cat > $Tmpfile <<EOF
$Infil
$Otfil
$X9fil
EOF

elif [[ $Pgm = shefpars ]]; then
cat > $Tmpfile <<EOF
$Infil
$Otfil
$Shfil
$Xxfil
EOF

elif [[ $Pgm = shefpost ]]; then
cat > $Tmpfile <<EOF
$Infil
$Otfil
$X9fil
$Xxfil
EOF

elif [[ $Pgm = shefutil ]]; then
cat > $Tmpfile <<EOF
$Infil
$Otfil
EOF

elif [[ $Pgm = filecrat ]]; then
cat > $Tmpfile <<EOF
$Infil
$Otfil
EOF

else
cat > $Tmpfile <<EOF
$Infil
$Otfil
$Pufil
EOF

fi

# Now execute the program
 
##=## eval $Xqt_prefix $Ex_dir/$Pgm < $Tmpfile $Otfil_actn $Num_actn$Log_actn; }
   if [ $Xqt_pgm = on ]; then
     eval $Ex_dir/$Pgm < $Tmpfile $Otfil_actn $Num_actn$Log_actn
   else
     eval $RshCmd $ofs_server -n \"{ export ofs_level=$lvl; $Ex_dir/$Pgm < $Tmpfile $Otfil_actn $Num_actn$Log_actn; }\"
   fi
 
# Print execution check information only

else
Oper_dir=$(gad   ofs_fs5files)
Sys_dir=$(gad    rfs_sys_dir)
Mod_dir=$(gad    ofs_mods_dir)
Grid_dir=$(gad   ofs_griddb_dir)
Reor_dir=$(gad   ofs_reorder_dir)

eval print "' '"Execution check information: $Log_actn
eval print "'   OFS data files directory:    '"$Oper_dir  $Log_actn
eval print "'   System files directory:      '"$Sys_dir   $Log_actn
eval print "'   Mods files directory:        '"$Mod_dir   $Log_actn
eval print "'   Gridded data directory:      '"$Grid_dir  $Log_actn
if [[ $Pgm = reorder ]]
   then
eval print "'   OFS Reorder files directory: '"$Reor_dir   $Log_actn
   fi
eval print ""  $Log_actn

fi
# ========== End of program execution checks

# Remove any output files that are empty

Ck_list="$Otfil $Pufil $Cofil $X1fil $X8fil $X9fil $X97fil"
for Ck_fil in $Ck_list
 do
 if [[ -a $Ck_fil && -f $Ck_fil && ! -s $Ck_fil ]]
  then
    eval print "''" $Log_actn
    eval print Deleting $Ck_fil ... $Log_actn
    eval print "'   '"... nothing was written to it! $Log_actn
    rm $Ck_fil
  fi
 done

elapsed_time=$SECONDS
((min = elapsed_time / 60))
((sec = elapsed_time % 60))

ms="s"
ss="s"
if (( min == 1 ))
  then
    ms=""
  fi
if (( sec == 1 ))
  then
    ss=""
  fi


eval print "''" $Log_actn
if [[ $Xqt_pgm = "on" ]]
   then
eval print "' Execution of $Pgm took $min minute$ms and $sec second$ss.'" $Log_actn
else 
eval print "' Execution check for $Pgm took $min minute$ms and $sec second$ss.'" $Log_actn
fi

eval print "''" $Log_actn
eval print ============================================================================$Log_actn
eval print "' '"Ending $Pgm run at $(date -u +"%T %Z") on \
$(date -u +"%a %b %d %Y") $Log_actn
eval print ============================================================================$Log_actn
