#!/bin/ksh
#
# process_geoarea
#
# Bryon Lawrence          May 15, 2002                   OHD
# Moria Shebsovich        Jul 30, 2003			 OHD
# Bryon Lawrence          Nov 14, 2003                   OHD
#                         - Modified this script to delete and load
#                           LineSegs information for the boundary type
#                           being processed.  Formerly, Hydrobase would
#                           delete ALL LineSegs data when importing areal data.
#                           It would load ALL lineSegs data when the user
#                           closed the Hydrobase Areal Data GUI.  This script
#                           uses sqlcmd to delete information from
#                           the LineSegs database table.
#
# Bryon Lawrence          Nov 19, 2003                   OHD
#                         - Modified this script to delete the data from the
#                           GeoArea table.  This functionality used to be
#                           in the Hydrobase in the import_geoarea routine.
#                           Process_geoarea is being setup to be standalone.
#                           That is, it should be able to handling all of the
#                           details of processing WHFS geodata files on its 
#                           own.
#
# Bryon Lawrence          January 7, 2004                OHD
#                         - Added the redirection of standard error to 
#                           standard output for the calls to executables
#                           (unload_geoarea, load_geoarea, load_linesegs,
#                           convert_ascii_to_latlon, grid_to_area, and 
#                           sqlcmd).
#
# Moria Shebsovich        October 12, 2004               OHD
#                         - The script is modified to read geodata from the 
#		            set of ascii files and write to the geoarea table.
#                           The unload functionality was eliminated, now 
#                           ascii files are the master files, they should be 
#                           edited as needed, and updated data loaded into 
#                           the geoarea table. 
# Mark Glaudemans	  February 3, 2005
#                           Removed RESVRS from consideration in GeoArea,
#                           LineSegs loading
#
# This script is responsible for manipulating the geoarea data sets used
# to populate files and tables in the ihfs database.  These data sets
# can then be used to plot graphical overlays in an application such as
# Hydromap.
# 
# The script creates two types of binary files: 
#       1) Geographic overlay files.
#       2) Navigation files which tell the user of Hydroview/MPE which county
#          and basin the mouse pointer is currently over.
#
# This script provides the logic to load geodata to the
# geoarea table.  When loading geoarea data into the database, it also
# executes a sequence of commands that updates the "grid_to_basin_hrap.[OS]" and
# "grid_to_county_hrap.[OS]" navigation files which provide cursor location 
# information at a HRAP grid resolution for Hydroview/MPE.  These are also
# referred to as the navigation files because they indicate to the user 
# which basin and county the mouse pointer is currently in.
#
# The overlay and navigation files created are as follows.  
# The binary files are created during load operations.
#
# Overlay          Data File (load)    Binary File  
# =======          ===============     ====================
# Basins           basins.dat          basins_latlon.OS
# Counties         counties.dat        counties_latlon.OS
# Reservoirs       resvrs.dat          resvrs_latlon.OS
# Zones            zones.dat           zones_latlon.OS
#
# Navigation File       Binary File
# ===============       ===========
# Basin                 grid_to_basin_hrap.OS
# County                grid_to_county_hrap.OS
#
# Usage:
#
# process_geoarea -l -d -t filename
#
# Where -l specifies that the data in <filename> will be loaded into the
#          geoarea database table.
#       -d specifies the name of the database that the geoarea table
#          resides in.
#       -t indicates the type of the GEOAREA data being loaded.
#          Valid types:
#          COUNTY, STATE, RESRVR, ZONE, BASIN
#
#       "Filename" is the full path and name of the file containing the
#       geoarea data.  If the file is in the same directory as the
#       this script is being run in, "./filename" can be used.
#
#       All other options (-l, -d , -t, filename) must be supplied
#       or the script will not run.
#
# Programs run from this script:
#       Option combination: -ldt filename
#          load_geoarea
#          grid_to_area, which runs 
#          if type is "BASIN" or "COUNTY" only.
#
# Error Returns:
#
#       This script will exit with a value of "0" upon successful completion.
#       This script will exit with a value of "1" when an invalid combination
#       of arguments has been passed to it.
#       This script will exit with a value of "2" when a geoarea data filename
#       has not been supplied to it.
#       This script will exit with a value of "3" when an invalid geoarea
#       boundary type has been passed to it.
#       This script will exit with a value of "4" when rows from the LineSegs
#       database table cannot be deleted.
#       This script will exit with a value of "5" when rows from the GeoArea
#       table cannot be deleted.
#
# Assumptions:
#       In order for this script to work the following must be done first:
#       1) set_hydro_env must be sourced before this script is run.
#
# Log Files:
#       There are two possible log files depending on the error return:
#       Error returns 1, 2, 3: The log file will be process_geoarea.log
#       Error returns 0, 4, 5: The log file will be process_geoarea_TYPE.log
#          where TYPE is BASIN, COUNTY, RESRVR, or ZONE.
#
###############################################################################
#
#
# Function which describes the correct useage of this script.
useage ()
{
   printf "Useage: process_geoarea -l -d(database name) -t(type) filename"
   printf "\n        where -l means to load the contents of the geoarea" 
   printf "\n                 table"
   printf "\n        where -d is the name of the database in which the"
   printf "\n                 geoarea table resides"
   printf "\n        where -t is the type of the geoarea being processed:"
   printf "\n                 COUNTY, STATE, RESRVR, ZONE, BASIN"     
   printf "\n        where filename is the full path and name of the file"
   printf "\n                 containing the ascii geoarea data.\n"

}

#
#  Initialize the variables that will contain the command line options.
found=0         # Flag indicating whether or not a type is valid. 
load=0          # Flag indicating that the "-l" option was specified.
db_found=0      # Flag indicating that the database name was found.
type_found=0    # Flag indicating that the geoarea type was found.
load_found=0    # Flag indicating that the load flag was supplied.

valid_types="COUNTY STATE RESRVR ZONE BASIN"

#
# Create the log directory.
LOGNAME=$WHFS_UTIL_LOG_DIR/process_geoarea.log
rm -f $LOGNAME

date=`date -u +"%A, %B %d, %Y %H:%M:%S"`

echo "=====================================" | tee -a $LOGNAME
echo "Starting process_geoarea on $date ..." | tee -a $LOGNAME
printf "Processing command line arguments.\n" | tee -a $LOGNAME
	printf "Logging to $LOGNAME.\n"

	# Test the supplied options to make sure that they are valid.
	while getopts d:t:l name 2>/dev/null
	do
	   case $name in

	      d)
		  # This is the database name.
		  dbname=$OPTARG
		  db_found=1
		  ;;

	      t)
		  # This is the geoarea type.
		  type=$OPTARG
		  type_found=1
		  ;;

	      l)
		  # This option specifies that the file be loaded.
		  load=1
		  load_found=1
		  ;;

	      ?)
		  useage | tee -a $LOGNAME
          exit 1
          ;;
   esac
done

if [ $load -eq 0 ]
then

   useage | tee -a $LOGNAME
   exit 1

fi

if [[ $db_found -eq 0 || $type_found -eq 0 ]]
then

   useage | tee -a $LOGNAME
   exit 1

fi

#
# Retrieve the filename.
if [[ $OPTIND -le $# ]]
then

    # Shift the parameters to dispose of the ones we do not need.
    while [ $OPTIND -gt 1 ]
    do
       (( OPTIND = OPTIND - 1 ))
       shift
    done

    # Retrieve the filename.
    filename=$1

else

    printf "Could not find the filename for the ascii geoarea data.\n"
    useage | tee -a $LOGNAME
    exit 2
fi

# Test to determine if the type is valid.
for i in $valid_types
do

   if [[ $type = $i ]]
   then
      found=1
      break 
   fi

done

if [ found -eq 0 ]
then
   
   printf "The type $type supplied via the \"-t\" option is invalid.\n" 
   useage | tee -a $LOGNAME
   exit 3

fi

#  Build the name of the log file.  This will include the boundary type
#  being processed.
FINALNAME=$WHFS_UTIL_LOG_DIR/process_geoarea_$type.log
rm -f $FILENAME

if [[ $load -eq 1 ]]
then
   printf "Running process_geoarea to load $type data\n" | tee -a $LOGNAME
   printf "from file $filename.\n" | tee -a $LOGNAME
fi

if [ load -eq 1 ]
then

    #  Delete the information from the GeoArea and LineSegs table
    #  for the boundary type being processed.
    
   if [ $type != "RESRVR" ]
   then
      delete_linesegs="DELETE FROM LineSegs\n \
                       WHERE area_id IN (\n \
                       SELECT area_id\n \
                       FROM GeoArea\n \
                       WHERE boundary_type='$type');\n"
                     
      printf "Deleting LineSegs using query: $delete_linesegs\n" | \
         tee -a $LOGNAME

#      echo $delete_linesegs | \
#          $SQLCMD_BIN_DIR/sqlcmd -d $DB_NAME@$INFORMIXSERVER \
#             2>&1 | tee -a $LOGNAME

      echo $delete_linesegs | $POSTGRESQLBINDIR/psql $DB_NAME 2>&1 | tee -a $LOGNAME

      if [ $? -ne 0 ]
      then
        printf "Could not delete rows corresponding to GeoArea type\n" | \
             tee -a $LOGNAME
         printf "$type from the LineSegs database table.\n" | \
             tee -a $LOGNAME
         mv $LOGNAME $FINALNAME
         exit 4

      fi 
 
      delete_geoarea="DELETE FROM GeoArea\n \
                      WHERE boundary_type='$type';"

      printf "Deleting GeoArea info using query: $delete_geoarea\n" | \
             tee -a $LOGNAME 

#      echo $delete_geoarea | $SQLCMD_BIN_DIR/sqlcmd -d $DB_NAME@$INFORMIXSERVER |\
#           tee -a $LOGNAME
   
      echo $delete_geoarea | $POSTGRESQLBINDIR/psql $DB_NAME 2>&1 | tee -a $LOGNAME

      if [ $? -ne 0 ]
      then   
         printf "Could not delete rows from the GeoArea table\n" | \
             tee -a $LOGNAME
         printf "corresponding to boundary_type $type.\n" | \
             tee -a $LOGNAME
         mv $LOGNAME $FINALNAME
         exit 5

      fi
 
      printf "Running $WHFS_BIN_DIR/load_geoarea$OS_SUFFIX -d$dbname\n" \
         | tee -a $LOGNAME
      printf "-i$filename -t$type\n" | tee -a $LOGNAME

      $WHFS_BIN_DIR/load_geoarea$OS_SUFFIX -d"$dbname" -i"$filename" -t"$type" \
        2>&1 | tee -a $LOGNAME


      printf "Running $WHFS_BIN_DIR/load_linesegs$OS_SUFFIX -d"$dbname" -i"$filename"\n" \
         | tee -a $LOGNAME
      printf "-t$type\n" | tee -a $LOGNAME

      $WHFS_BIN_DIR/load_linesegs$OS_SUFFIX -d"$dbname" -i"$filename" -t"$type" \
        2>&1 | tee -a $LOGNAME

   fi
    
    
   if [ $type = "BASIN" ]
   then

      printf "Running $PPROC_BIN/convert_ascii_to_latlon$OS_SUFFIX\n" | \
         tee -a $LOGNAME
      printf "$filename basins_latlon$OS_SUFFIX\n" | tee -a $LOGNAME
      $PPROC_BIN/convert_ascii_to_latlon$OS_SUFFIX $filename \
         basins_latlon$OS_SUFFIX 2>&1 | tee -a $LOGNAME
	 
      printf "Running $PPROC_BIN/grid_to_area$OS_SUFFIX -d$dbname\n" \
         | tee -a $LOGNAME
      printf "-tBASIN grid_to_basin_hrap$OS_SUFFIX\n" | tee -a $LOGNAME
      $PPROC_BIN/grid_to_area$OS_SUFFIX -d"$dbname" -t"BASIN" \
         grid_to_basin_hrap$OS_SUFFIX 2>&1 | tee -a $LOGNAME
   
   elif [ $type = "COUNTY" ]
   then

      printf "Running $PPROC_BIN/grid_to_area$OS_SUFFIX -d$dbname\n" \
         | tee -a $LOGNAME
      printf "-tCOUNTY grid_to_county_hrap$OS_SUFFIX\n" | tee -a $LOGNAME
      $PPROC_BIN/grid_to_area$OS_SUFFIX -d"$dbname" -t"COUNTY" \
         grid_to_county_hrap$OS_SUFFIX 2>&1 | tee -a $LOGNAME
   
   elif [ $type = "RESRVR" ]
   then
   
      printf "Running $PPROC_BIN/convert_ascii_to_latlon$OS_SUFFIX\n" \
         | tee -a $LOGNAME
      printf "-d$dbname -i$filename -t$type\n" | tee -a $LOGNAME
      $PPROC_BIN/convert_ascii_to_latlon$OS_SUFFIX $filename \
         resvrs_latlon$OS_SUFFIX 2>&1 | tee -a $LOGNAME
   
   fi

fi

date=`date -u +"%A, %B %d, %Y %H:%M:%S"`
printf "Process_geoarea completed on $date\n" | tee -a $LOGNAME

# Copy the running log file into the log file which contains, in its name,
# the geoarea boundary type that was processed during by the process_geoarea
# script.
mv $LOGNAME $FINALNAME

exit 0
