#!/bin/ksh
#
# process_dpafiles
#
# May 10, 2002
# script for processing dpa products for the WHFS.
#
# the script takes the input data directory,
# output log directory, and bin directory as arguments. 
# it is possible that the calling script may be redirecting
# all standard output from this script to the same log file.
#
# Modified:  Nov  5, 2002   Mark removed update_latestFFG
#            Aug 15, 2003   Paul - replaced "test -r" with "ls -1F ..."
#

# check for input args 
#

USAGE="process_dpafiles input_data_dir output_log_dir output_error_dir bin_dir1 bin_dir2 "
if [ $# -ne 5 ]
then
  print -u2 "\nUSAGE: $USAGE\n"
  exit 1
fi


# set some local variables
# the bin_dir1 arg is for the precip_proc/bin dir
# the bin_dir2 arg is for the whfs/bin dir, which is currently not used

DATA_DIR=$1
LOG_DIR=$2
ERR_DIR=$3
BIN_DIR1=$4
BIN_DIR2=$5

# define the log file name

LOG_FILE=$LOG_DIR/`date -u +process_dpa_log_%m%d`

echo "Data directory: " $DATA_DIR >> $LOG_FILE
echo "Log  directory: " $LOG_DIR  >> $LOG_FILE
echo "Error directory:" $ERR_DIR  >> $LOG_FILE
echo "Bin directory:" $BIN_DIR1   >> $LOG_FILE

#
# define functions for checking for a stop file and
# logging a message. note that for the
# shell function "test", a true condition returns 0.

checkDPAstop()
{
	STOP_DIR=$1
	test -r $STOP_DIR/stop_dpadecode
	FILES_FOUND=$?
	if test $FILES_FOUND -eq 0
	then
		return 1
	else
		return 0
	fi
}


logDPAstop()
{
	LOG_FILE=$1
	
	DTZ=`date -u`
	echo "\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" >> $LOG_FILE
	echo "Terminating process."    >> $LOG_FILE
	echo "Stopfile found at:" $DTZ >> $LOG_FILE
	echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n" >> $LOG_FILE
	
	return 0
}


#
# enter an infinite loop.  for each pass thru main loop,
# look for input files and process them individually.
# check for stop file after each loop and after any 
# data file that may be processed.  
# after the raw input file is processed, the called 
# processing script handles the file (either deletes or moves it)
# 

let loop_cnt=0

while test 1=1
do

# define the log file name

LOG_FILE=$LOG_DIR/`date -u +process_dpa_log_%m%d`

#
# this script also performs a secondary function of
# creating the mosaicked FFG grids, and computing areal FFG values
# via the gen_areal_ffg processes.
#

let loop_cnt=loop_cnt+1
if ((loop_cnt  > 12))
then
        DTZ=`date -u +%a@%H:%M:%S`
        echo Running gen_areal_ffg. $DTZ >> $LOG_FILE
        $BIN_DIR1/run_gen_areal_ffg
   	let loop_cnt=0
fi

checkDPAstop $DATA_DIR
STOP_FOUND=$?

if test STOP_FOUND -eq 1
then
	logDPAstop $LOG_FILE
	exit
fi

FILES_FOUND=`ls -F $DATA_DIR | grep -v "*" | grep -v "/" | wc -l`
if test $FILES_FOUND -ne 0
then
	for DATA_FILE in `ls $DATA_DIR`
	do
		
		checkDPAstop $DATA_DIR
		STOP_FOUND=$?
		if test STOP_FOUND -eq 1
		then
			logDPAstop $LOG_FILE
			exit
		fi
		
		
		#name=`basename $DATA_FILE`
		echo "----------------" >> $LOG_FILE		
		echo Processing $DATA_DIR/$DATA_FILE >> $LOG_FILE
		$BIN_DIR1/process_dpa $DATA_DIR/$DATA_FILE $LOG_FILE $ERR_DIR $BIN_DIR1  2>>$LOG_FILE
		
	done
	
else
	DTZ=`date -u +%a@%H:%M:%S`
	echo "No files awaiting decoding at:" $DTZ >> $LOG_FILE	
	sleep 45
fi

done

		
