#!/bin/ksh
#  ========================================================================
#  pgm: ffg .. run FFGS programs
#
#       Release 1.31     01/09/2001
#
USAGE="usage:ffg -p pgm [-i in_file] [-o out_file_prefix] \
[-f ffg_&_ofs_filesets] [-g ffg_fileset_only] [-h hydrologist_on_duty]  \
[-m message_filename] [-a apend_name] [-c copy_method] [-b bin_dir]  \
[-u user] [-q user_qulf] [-r] [-l] [-x] [-t] [-s]"
#
# The only required parameter is the program to be executed indicated by the 
# -p switch.
#
# All switches are documented further down in this script where they are
# output when the script executes with no switches,i.e. ffg.
#===========================================================================
# HISTORY:
#  09/14/1998 - Release 1.0 - Tim Sweeney
#
#  10/07/1998 - Release 1.1 - Tim Sweeney
#    Added token ffg_out_dir
#    Added -b for executable directory
#
#  08/20/1999 - Release 1.2 - Tim Sweeney
#    Added -r for alternate grid directories
#    Changed program GRIBIT to DEGRIB
#
#  05/03/2000 - Release 1.30 - Tim Sweeney
#    Changed tokens that point to .../devl/bin
#    and .../ffg/bin/RELEASE and .../ffg/bin/ARCHIVE
#
#  01/09/2001 - Release 1.31 - Tim Sweeney
#    Removed command -d to point to ../devl/bin directory.  Use 
#    -b d.
#    Corrected -b name so name is the complete path and directory of
#    the executable.
#===========================================================================

Dte=$(date -u +%Y%m%d.%H%M%S)

# find set_hydro_env and initialize the environment
prev_dir=`pwd`
env_file="set_hydro_env"
while [ ! -e ${env_file} ]
do
	cd ..
	if [ "/" = "`pwd`" ]
	then
		break
	fi
done
. ./${env_file}
cd ${prev_dir}

# initialize command line parameters
Pgm_cl=""
Infil_cl="tty"
Otfil_cl=""
Fl_set_cl=""
Gl_set_cl=""
Hod_set_cl=""
Msg_set_cl=""
Apname_cl=""
Copy_meth_cl="copy"
Bin_set_cl=""
User_cl=""
User_qulf=""
Grid_set="off"
Log_prt="on"
Xqt_pgm="on"
Redir="on"
##Devl="off"
Remsh_request="off"

# check command line arguments
while getopts p:i:o:f:g:h:m:a:c:b:u:q:rlxtds cl_args ; do
   #print "cl_args=$cl_args"
   case $cl_args in
      p) Pgm_cl=$OPTARG;;
      i) Infil_cl=$OPTARG;;
      o) Otfil_cl=$OPTARG;;
      f) Fl_set_cl=$OPTARG;;
      g) Gl_set_cl=$OPTARG;;
      h) Hod_set_cl=$OPTARG;;
      m) Msg_set_cl=$OPTARG;;
      a) Apname_cl=$OPTARG;;
      c) Copy_meth_cl=$OPTARG;;
      b) Bin_set_cl=$OPTARG;;
      u) User_cl=$OPTARG;;
      q) User_qulf=$OPTARG;;
      r) Grid_set="on";;
      l) Log_prt=off;;
      x) Xqt_pgm=off;;
      t) Redir="off";;
##      d) Devl="on";;
      s) Remsh_request="on";;
      :) Ms_arg=$OPTARG;;
      \?) bad_sw=YES;;
      esac
   done

# check if command line args were entered properly
bad_cl=0
if [[ $Ms_arg != "" || $bad_sw != ""  || $Pgm_cl = "" ]] ; then
   bad_cl=1
   fi
for Ck_arg in $Pgm_cl $Infil_cl $Otfil_cl $Fl_set_cl $User_cl ; do
   if [[ $Ck_arg = -[a-zA-Z] ]] ; then
      bad_cl=1
      break
      fi
   done

# create output directory for user if it does not exist
Usr=${User_cl:-$LOGNAME}
Out_dir=$(get_apps_defaults ffg_output)
if [[ $Out_dir = "" ]] ; then
   Out_dir=$(get_apps_defaults ffg_out_dir)
   fi
Out_dir=$(get_apps_defaults ofs_output)/$Usr
if [[ ! -d $Out_dir ]] ; then
   mkdir -p $Out_dir
   chmod ug+rw $Out_dir
   fi

Pgm=${Pgm_cl:-"No_pgm"}
#print "User_qulf=$User_qulf"
Cofil=$Out_dir/$Pgm$User_qulf"_log".$Dte

# check if messages are to be returned to terminal
if [[ $Redir = "on" ]] ; then
   Log_actn=">> $Cofil"
   else
      Log_actn=""
   fi

# stop if bad command line arguments entered
if (( $bad_cl == 1 )) ; then
   eval print ============================================================================$Log_actn
   eval print "' '"Stopping FFG script for $Pgm at $(date -u +"%T %Z") on \
        $(date -u +"%a %b %d %Y") $Log_actn
   eval print "'   $USAGE '" $Log_actn
   eval print ============================================================================$Log_actn
   eval print "''"  $Log_actn
   echo
   echo "The only required parameter is the program to be executed indicated "
   echo "by the -p switch."
   echo "--------------------------------------------------------------------"
   echo "All other parameters are optional and will be successfully provided "
   echo "values if not supplied on the command line.  However, certain switch"
   echo "values become meaningless unless provided with values by the user. "
   echo " Switches are:"
   echo
   echo " Switch   Description                      Default value"
   echo " ------   ------------------------------   --------------------------"
   echo "   -i     Input file/control of program     'tty' to interact with "
   echo "          execution.  Enter 'auto' for      the menu."
   echo "          automatic selection of first"
   echo "          item in ffguid or prodgen"
   echo "          menus. Enter 'chain' to "
   echo "          execute ffguid then prodgen"
   echo "          and functions as 'auto'."
   echo
   echo "   -o     Output file prefix or 'tty'.      'program name'"
   echo "          Files are date-time stamped"
   echo "          and placed in the output"
   echo "          directory. If 'tty' is given,"
   echo "          output goes to the terminal."
   echo "          (Use -m switch for single"
   echo "          message file ffgout.)"
   echo 
   echo "   -f     ffg and ofs file sets override.   The file sets indicated"
   echo "                                            by the get_apps_defaults"
   echo "                                            tokens 'ffg_level' and"
   echo "                                            'ofs_level'."
   echo
   echo "   -g     ffg file set override.            The file set indicated"
   echo "                                            by the get_apps_defaults"
   echo "                                            token 'ffg_level' only."
   echo
   echo "   -h     Initials of hydrologist on        None"
   echo "          duty"
   echo    
   echo "   -m     Change name of single             ffgout  (Used only when a"
   echo "          message file that contains        single file is specified"
   echo "          all the messages                  for all messages."
   echo
   echo "   -a     Append name to message            None"
   echo "          filename(s).  OR Enter 'date'"                    
   echo "          to append date-time stamp."
   echo
   echo "   -c     Method of copying files to        Copy file(s) to append"
   echo "          append a suffix name to the       filename(s)."
   echo "          message filename(s):"
   echo "           'copy' - copy file(s)"
   echo "           'move' - move file(s)"
   echo
   echo "   -b     Use executable directory          Use directory indicated"
   echo "          indicated as                      by the 'ffg_dir'/bin/ "
   echo "          a - 'ffg_dir'/bin/ARCHIVE token   RELEASE token."
   echo "          d - 'my_dir'/bin token (devl)"
   echo "          m - 'mgr_dir'/bin/RELEASE token"
   echo "          ma - 'mgr_dir'/bin/ARCHIVE token "
   echo "          name - path and directory"
   echo
   echo "   -u     User name override.  Used to      Log-in user id ($LOGNAME)."
   echo "          place output in output dir."
   echo "          other than the submitting"
   echo "          user's."
   echo
   echo "   -q     User name qualifier.  Used        None"
   echo "          when creating"
   echo "          [progname][user_qulf].[date]"
   echo "          files."
   echo
   echo "   -r     Use alternate directores for      Use the default directories"
   echo "          gridded guidance and runoff,      for gridded guidance and"
   echo "          grfft and grrot, respectively.    runoff, grff and grro"
   echo
   echo "   -l     Suppress info log message         Log message will be printed."
   echo "          generation."
   echo  
   echo "   -x     Conduct execution check only,     Program will be executed."
   echo "          displaying add'l info, but"
   echo "          program is not executed."
   echo
   echo "   -t     Have log information displayed    Output into log file."
   echo "          at terminal."
   echo 
   echo "   -s     Execute program on machine        Execute program on machine"
   echo "          designated as ofs_server via      from which ofs command is"
   echo "          get_apps_defaults mechanism.      issued."
   echo " end of switch descriptions"
   #---------------------------------------------------------------------------"
  exit 1
  fi

if [[ $Log_prt = "on" && $Redir = "on" ]] ; then
   print "FFG execution log information will be written to:"
   print " ==> $Cofil <=="
   fi

# set parameters for program execution
if [[ $Fl_set_cl != "" ]] ; then
   export ofs_level=$Fl_set_cl
   export ffg_level=$Fl_set_cl
   fi
if [[ $Gl_set_cl != "" ]] ; then
   export ffg_level=$Gl_set_cl
   fi
if [[ $Grid_set = "on" ]] ; then
   export ffg_gff_level="grfft"
   export ffg_gro_level="grrot"
   fi
if [[ $Bin_set_cl = "" ]] ; then
   Ex_dir=$(get_apps_defaults    ffg_dir)/bin/RELEASE   
   # Added by Guoxian Zhou 06/17/2003
   [ -n "$(get_apps_defaults ffg_rls)" ] && Ex_dir=$(get_apps_defaults  ffg_rls)
   elif [[ $Bin_set_cl = "d" || $Bin_set_cl = "D" ]] ; then
      Ex_dir=$(get_apps_defaults my_dir)/bin
      # Added by Guoxian Zhou 06/17/2003
      [ -n "$(get_apps_defaults my_rls)" ] && Ex_dir=$(get_apps_defaults  my_rls)
   elif [[ $Bin_set_cl = "a" || $Bin_set_cl = "A" ]] ; then
      Ex_dir=$(get_apps_defaults ffg_dir)/bin/ARCHIVE
   elif [[ $Bin_set_cl = "m" ]] ; then
      Ex_dir=$(get_apps_defaults mgr_dir)/bin/RELEASE
      # Added by Guoxian Zhou 06/17/2003
      [ -n "$(get_apps_defaults mgr_rls)" ] && Ex_dir=$(get_apps_defaults  mgr_rls)
   elif [[ $Bin_set_cl = "ma" ]] ; then
      Ex_dir=$(get_apps_defaults mgr_dir)/bin/ARCHIVE
   else
      Ex_dir=$Bin_set_cl
   fi
 
##if [[ $Devl = on ]] ; then
##   Ex_dir=$(get_apps_defaults my_dir)/bin
##   else
##      Ex_dir=$(get_apps_defaults ffg_dir)/bin/RELEASE
##   fi

# check if program found
if [[ ! -a $Ex_dir/$Pgm || ! -f $Ex_dir/$Pgm || ! -x $Ex_dir/$Pgm ]] ; then
   eval print ============================================================================$Log_actn
   eval print "' '"Stopping FFG script for $Pgm at $(date -u +"%T %Z") on \
	      $(date -u +"%a %b %d %Y") $Log_actn
   eval print "'  ==> '"$Ex_dir/$Pgm"' <=='"  $Log_actn
   eval print "' '"does not exist, is not a file, or is not executable. $Log_actn
   eval print ============================================================================$Log_actn
   eval print "''"  $Log_actn
   exit 1
   fi

##Inflx=${Infil_cl:-stop}
##Infil=$In_dir/$Inflx

# check program name to see if to set output to tty
if [[ $Pgm = zgrid ]]; then
   Otfil_cl=tty
   elif [[ $Infil_cl != auto && $Infil_cl != chain ]] ; then
      Otfil_cl=tty
   fi

if [[ $Otfil_cl = tty ]]; then
   Otflx=tty
   Otfil=tty
   Otfil_actn=""
   else
      Otflx=${Otfil_cl:-$Pgm}$User_qulf.$Dte
      Otfil=$Out_dir/$Otflx
      Otfil_actn="> $Otfil"
      export ffg_print_filename=$Otfil
      #print "ffg_print_filename=$(get_apps_defaults ffg_print_filename)"
   fi
 
# check if input file exists as a file and is not empty
##if [[ ! -a $Infil || ! -f $Infil || ! -s $Infil ]] ; then
##   eval print ============================================================================$Log_actn
##   eval print "' '"Stopping OFS script at $(date -u +"%T %Z") on \
##	        $(date -u +"%a %b %d %Y") $Log_actn
##   eval print "'  ==> '"$Infil"' <=='"  $Log_actn
##   eval print "' '"does not exist, is not a file, or is empty. $Log_actn
##   eval print ============================================================================$Log_actn
##   eval print "''"  $Log_actn
##   exit 1
##   fi

## remove tabs from input file
##if grep -l '	' "$Infil" >&-; then
##   tab_out $Infil ${Infil}_temp    \
##   && mv ${Infil}_temp $Infil    \
##   || rm -f ${Infil}_temp
##   chmod 664 $Infil
##   fi

# check if request made to execute program on ofs_server
This_cpu=$(hostname | cut -f1 -d".")
Xqt_prefix=""
if [[ $Remsh_request = "on" ]] ; then
   ofs_server=$(get_apps_defaults ofs_server)
   ofs_server_defined="no"
# cannot do remote execution if token not defined
   if [[ $ofs_server != "" ]] ;then
      ofs_server_defined="yes"
   # check if already on ofs_server 
      if [[ $This_cpu != $ofs_server ]] ; then
      # check if can remsh to that machine
         remsh $ofs_server -n date >> /dev/null 2>> /dev/null
         remsh_code=$?
         if (( $remsh_code == 0 )) ; then
            Xqt_prefix="remsh "$ofs_server" "
            valid_request="yes"
            else
               valid_request="no"
            fi
         fi
      fi
   fi
 
zbeglog () {
   eval print ============================================================================$Log_actn
   if [[ $Xqt_pgm = "on" ]] ; then
      eval print "' '"Starting FFG program execution at $(date -u +"%T %Z") on \
           $(date -u +"%a %b %d %Y") $Log_actn
      else 
         eval print "' '"Starting FFG execution check at $(date -u +"%T %Z") on \
              $(date -u +"%a %b %d %Y") $Log_actn
      fi
   eval print "'   FFG command issued on:    '"$This_cpu   $Log_actn
   eval print "'   Program to be executed:   '"$Pgm        $Log_actn
   if [[ $Remsh_request = "off" ]] ; then
      eval print "'    Local execution on:      '"$This_cpu   $Log_actn
      else
         eval print "'    Remote exec requested.   '"           $Log_actn
         if [[ $This_cpu = $ofs_server ]] ; then
            eval print "'     This cpu is ofs server. '"            $Log_actn
            eval print "'    Local execution on:      '"$This_cpu   $Log_actn
            else
               if [[ $ofs_server_defined = "no" ]] ; then
                  eval print "'     OFS Server not defined. '"            $Log_actn
                  eval print "'    Local execution on:      '"$This_cpu   $Log_actn
                  else
                     if [[ $valid_request = "no" ]] ; then
                        eval print "'     Cannot execute on:      '"$ofs_server $Log_actn
                        eval print "'    Local execution on:      '"$This_cpu   $Log_actn
                        else
                           eval print "'    Remote execution on:     '"$ofs_server $Log_actn
                        fi
                  fi
            fi
      fi
   eval print "'   Executable directory:     '"$Ex_dir   $Log_actn
   ##eval print "'   Input file:               '"$Inflx    $Log_actn
   ##eval print "'   Input directory:          '"$In_dir   $Log_actn
   eval print "'   Output file:              '"$Otflx    $Log_actn
   eval print "'   Output directory:         '"$Out_dir  $Log_actn
   eval print ============================================================================$Log_actn
   }

zendlog () {
   elapsed_time=$SECONDS
   ((min = elapsed_time / 60))
   ((sec = elapsed_time % 60))
   ms="s"
   ss="s"
   if (( min == 1 )) ; then
      ms=""
      fi
    if (( sec == 1 )) ; then
      ss=""
      fi
   eval print "''" $Log_actn
   if [[ $Xqt_pgm = "on" ]] ; then
      eval print "' Execution of $Pgm took $min minute$ms and $sec second$ss.'" $Log_actn
      else 
         eval print "' Execution check for $Pgm took $min minute$ms and $sec second$ss.'" $Log_actn
      fi
   eval print "''" $Log_actn
   eval print ============================================================================$Log_actn
   eval print "' '"Ending $Pgm run at $(date -u +"%T %Z") on $(date -u +"%a %b %d %Y") $Log_actn
   eval print ============================================================================$Log_actn
   }

zbeglog

blank=" "

#set -o xtrace

# check if to run program
if [[ $Xqt_pgm = "on" ]] ; then
   if [[ $Pgm = ffguid ]] ; then
      if [[ $Otfil != tty ]] ; then
         set -o xtrace
         #print "Pgm=$Pgm blank=$blank"
         eval $Xqt_prefix $Ex_dir/$Pgm  << eof $Otfil_actn 2$Log_actn
c
$blank
eof
         set +o xtrace
         else
            eval $Xqt_prefix $Ex_dir/$Pgm    $Otfil_actn 2$Log_actn
         fi
      if [[ $Infil_cl = "chain" ]] ; then
         zendlog
         Pgm="prodgen"
#         eval print "'  change pgm to '"$Pgm  $Log_actn
         if [[ $Otfil_cl != tty ]] ; then
            Otflx=${Otfil_cl:-$Pgm}$User_qulf.$Dte
            Otfil=$Out_dir/$Otflx
            Otfil_actn="> $Otfil"
            export ffg_print_filename=$Otfil
            #print "ffg_print_filename=$(get_apps_defaults ffg_print_filename)"
            Cofil=$Out_dir/$Pgm$User_qulf"_log".$Dte
            Log_actn=">> $Cofil"
            if [[ $Log_prt = "on" && $Redir = "on" ]] ; then
               print "FFG execution log information will be written to:"
               print " ==> $Cofil <=="
               zbeglog
               fi
            fi
         fi
      fi
   if [[ $Pgm = prodgen ]] ; then
      #set -o xtrace
      #print "Pgm=$Pgm blank=$blank Hod_set_cl=$Hod_set_cl"
      if [[ $Otfil != tty ]] ; then
         if [[ $Hod_set_cl = "" || $Hod_set_cl = "." ]] ; then
            #set -o xtrace
            eval $Xqt_prefix $Ex_dir/$Pgm  << eof $Otfil_actn 2$Log_actn
1
$blank
eof
            #set +o xtrace
            else
               eval $Xqt_prefix $Ex_dir/$Pgm  << eof $Otfil_actn 2$Log_actn
1
$Hod_set_cl
$Otfil
eof
            fi
         else
            eval $Xqt_prefix $Ex_dir/$Pgm   $Otfil_actn 2$Log_actn
         fi
      elif [[ $Pgm = zgrid ]] ; then
         eval $Xqt_prefix $Ex_dir/$Pgm   $Otfil_actn 2$Log_actn
      elif [[ $Pgm = sfcst ]] ; then
         eval $Xqt_prefix $Ex_dir/$Pgm   $Otfil_actn 2$Log_actn
      elif [[ $Pgm != ffguid ]] ; then
         eval $Xqt_prefix $Ex_dir/$Pgm  $Otfil_actn 2$Log_actn
      fi
   else
#  print execution check information
      Ffoper_dir=$(get_apps_defaults  ffg_gsfiles)
      Oper_dir=$(get_apps_defaults   ofs_fs5files)
      Sys_dir=$(get_apps_defaults    rfs_sys_dir)
      eval print "' '"Execution check information: $Log_actn
      eval print "'   FFG data files directory:    '"$Ffoper_dir  $Log_actn
      eval print "'   OFS data files directory:    '"$Oper_dir  $Log_actn
      eval print "'   System files directory:      '"$Sys_dir   $Log_actn
      eval print ""  $Log_actn
      zendlog
      exit
   fi

# time stamp ffgout file or individual product files when used and 
# option to change name of ffgout file
if [[ $Pgm = prodgen ]]; then
   if [[ $Copy_meth_cl = copy ]]; then
      Cpactn="cp"
      elif [[ $Copy_meth_cl = move ]]; then
         Cpactn="mv"
      fi
   if [[ $Apname_cl = date ]]; then
      Part2_name=$Dte
      elif [[ $Apname_cl != "" ]]; then
         Part2_name=$Apname_cl
      else
         Part2_name=""
      fi
   if [ -f $Out_dir/ffgout ] ; then
   # for single file
      if [[ $Msg_set_cl = "" ]]; then
         Part_name="ffgout"
         else
            Part_name=$Msg_set_cl
         fi
      if [[ $Apname_cl != "" ]]; then
         $Cpactn $Out_dir/ffgout $Out_dir/$Part_name.$Part2_name
         elif [[ $Msg_set_cl != "" ]]; then
            $Cpactn $Out_dir/ffgout $Out_dir/$Part_name
         fi
      fi
# for individual files
   if [[ $Apname_cl != "" ]]; then
      #for Pth in $(ls $Dir/*[0-9][0-9][0-9] 2>&-); do
      for Pth in $(ls $Out_dir/[A-Z]*[!.][!0-9][!a-z] 2>&-); do
         Part_name=${Pth##*/}
         Date_name=$Part_name.$Part2_name
         echo "    $Out_dir/$Date_name"
         $Cpactn $Out_dir/$Part_name $Out_dir/$Date_name
         done
      fi
   fi

# remove any output files that are empty
Ck_list="$Otfil $Pufil $Cofil"
for Ck_fil in $Ck_list ; do
   if [[ -a $Ck_fil && -f $Ck_fil && ! -s $Ck_fil ]] ; then
      eval print "''" $Log_actn
      eval print Deleting $Ck_fil because nothing was written to it. $Log_actn
      rm $Ck_fil
      fi
   done

#
