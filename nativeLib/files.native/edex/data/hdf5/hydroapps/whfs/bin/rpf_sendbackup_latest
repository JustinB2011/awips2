#!/bin/ksh
# 
# rpf_sendbackup_latest
#
# version: August 25, 2006
#
# This script is used to send the latest RiverPro product issuance info
# to other offices if for some abnormal reason the info was not sent 
# previously using routine operations.
# 
# It will only send info for products/events which have a phenom=FL and
# a signif=W,A,Y, and which are for host office
#
#

#--------------------------------------------------------------------
#
# set up SOME environment variables for WHFS applications
#
. /awips/hydroapps/set_hydro_env
export RPF_LOG_DIR=$(get_apps_defaults rpf_log_dir)
export WHFS_LOCAL_BIN_DIR=$(get_apps_defaults whfs_local_bin_dir)
export DB_NAME=$(get_apps_defaults db_name)


#
# Initialize the status to bad
#

RETURN_STATUS=1

#
# define the log file name.

DATESTR=`date -u +%Y%m%d`
LOGNAME=$RPF_LOG_DIR/rpf_send_backup_latest.log.$DATESTR

#
# log the initial info
#

echo ">>>>>>>>>>>> " >> $LOGNAME
Dte=`date -u`
echo Invoking rpf_sendbackup_latest at: $Dte >> $LOGNAME

#
# -----------------------------------------------------
#  define a function that can be used repeatedly for each 
#  of the VTEC signif codes being processed
# 

invoke_backup_script()
{

# check if data exist
 
  NUM_EVENT=$(
   echo "SELECT COUNT(*) FROM VTECevent \
   WHERE phenom='FL' AND signif='$signif' AND office_id = (SELECT hsa FROM Admin) \
   AND producttime > '2006-01-01 00:00:00';" | \
   $POSTGRESQLBINDIR/psql -q -t $DB_NAME 
             )
	   
  if [ $NUM_EVENT -eq 0 ]
  then
      print No records found for signif=$signif
      echo "No records found for signif=$signif"  >> $LOGNAME
      return
  elif [ -z "$NUM_EVENT" ]
  then
      print The number of events is undetermined
      echo The number of events is undetermined  >> $LOGNAME
      return
  fi

  echo There are $NUM_EVENT events in VTECevent table with signif as $signif >> $LOGNAME

#
# load the rpf_sendbackup arguments into local variables
#

  PRODUCT_ID=$(
   echo "SELECT product_id FROM VTECevent \
        WHERE phenom='FL' AND signif='$signif' AND office_id = (SELECT hsa FROM Admin) \
        AND producttime > '2006-01-01 00:00:00' \
        ORDER BY etn DESC, producttime DESC LIMIT 1;" | \
   $POSTGRESQLBINDIR/psql -q -t $DB_NAME 
               )
	       
  PRODUCT_TIME=$(
   echo "SELECT producttime FROM VTECevent \
        WHERE phenom='FL' AND signif='$signif' AND office_id = (SELECT hsa FROM Admin) \
        AND producttime > '2006-01-01 00:00:00' \
        ORDER BY etn DESC, producttime DESC LIMIT 1;" | \
   $POSTGRESQLBINDIR/psql -q -t $DB_NAME 
               ) 
		
  WFO_SOURCE=$(
   echo "SELECT office_id FROM VTECevent \
        WHERE phenom='FL' AND signif='$signif' AND office_id = (SELECT hsa FROM Admin) \
        AND producttime > '2006-01-01 00:00:00' \
        ORDER BY etn DESC, producttime DESC LIMIT 1;" | \
   $POSTGRESQLBINDIR/psql -q -t $DB_NAME 
               ) 
	       
# print information 

  echo For signif as $signif >> $LOGNAME
  echo PRODUCT_ID:$PRODUCT_ID, PRODUCT_TIME:$PRODUCT_TIME, WFO_SOURCE:$WFO_SOURCE >> $LOGNAME

#
# find the two office destinations for the forecast point
#

  WFO_DESTINATION1=$(
   echo "SELECT primary_back FROM rpffcstpoint WHERE lid= \
        (SELECT geoid FROM VTECevent \
	WHERE phenom='FL' AND signif='$signif' AND office_id = (SELECT hsa FROM Admin) \
        AND producttime > '2006-01-01 00:00:00' \
        ORDER BY etn DESC, producttime DESC LIMIT 1) \
	ORDER BY 1 DESC LIMIT 1;" | \
   $POSTGRESQLBINDIR/psql -q -t $DB_NAME 
                     )
   
  WFO_DESTINATION2=$(
   echo "SELECT secondary_back FROM rpffcstpoint WHERE lid= \
        (SELECT geoid FROM VTECevent \
	WHERE phenom='FL' AND signif='$signif' AND office_id = (SELECT hsa FROM Admin) \
        AND producttime > '2006-01-01 00:00:00' \
        ORDER BY etn DESC, producttime DESC LIMIT 1) \
	ORDER BY 1 ASC LIMIT 1;" | \
   $POSTGRESQLBINDIR/psql -q -t $DB_NAME    
                    )
   

#
# invoke backup send for each defined destination
#

  print Invoking rpf_sendbackup from $WFO_SOURCE to $WFO_DESTINATION1
  echo Invoking rpf_sendbackup from $WFO_SOURCE to $WFO_DESTINATION1 >> $LOGNAME
 
  $WHFS_LOCAL_BIN_DIR/rpf_sendbackup  $PRODUCT_ID $PRODUCT_TIME $WFO_SOURCE $WFO_DESTINATION1

  RETURN_STATUS=$?

  if [ $RETURN_STATUS -eq 0 ]
  then
     print Send latest backup info request success from $WFO_SOURCE to $WFO_DESTINATION1
     echo Send latest backup info request success from $WFO_SOURCE to $WFO_DESTINATION1 >> $LOGNAME      
  else
     print Send latest backup info request failed status= $RETURN_STATUS from $WFO_SOURCE to $WFO_DESTINATION1 
     echo Send latest backup info request failed status= $RETURN_STATUS from $WFO_SOURCE to $WFO_DESTINATION1 >> $LOGNAME   
  fi
 
  print Invoking rpf_sendbackup from $WFO_SOURCE to $WFO_DESTINATION2
  echo Invoking rpf_sendbackup from $WFO_SOURCE to $WFO_DESTINATION2 >> $LOGNAME
 
  $WHFS_LOCAL_BIN_DIR/rpf_sendbackup  $PRODUCT_ID $PRODUCT_TIME $WFO_SOURCE $WFO_DESTINATION2

  RETURN_STATUS=$?

  if [ $RETURN_STATUS -eq 0 ]
  then
     print Send latest backup info request success from $WFO_SOURCE to $WFO_DESTINATION2
     echo Send latest backup info request success from $WFO_SOURCE to $WFO_DESTINATION2 >> $LOGNAME      
  else
     print Send latest backup info request failed status= $RETURN_STATUS from $WFO_SOURCE to $WFO_DESTINATION2
     echo Send latest backup info request failed status= $RETURN_STATUS from $WFO_SOURCE to $WFO_DESTINATION2 >> $LOGNAME   
  fi

  return $RETURN_STATUS
}

#  end of embedded function
# ----------------------------------------------------------

#
#
# select FL.W, FL.A, FL.Y products with highest etn
#
for signif in W A Y
do
  print Send latest backup product with hightest etn and signif code as $signif 
  echo "Send latest backup product with hightest etn and signif code as $signif" >> $LOGNAME
  invoke_backup_script
done

Dte=`date -u`
echo Completed rpf_sendbackup_latest at: $Dte >> $LOGNAME



