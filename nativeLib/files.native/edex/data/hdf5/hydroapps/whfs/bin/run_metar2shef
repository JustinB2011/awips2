#!/bin/ksh
# 
# run script for metar2shef (metar to shef)
##
# usage: run_metar2shef
# no args are used; it does create its own detailed log file
#
# if archiving is NOT enabled, then metar.cfg (located in $METAR_CONFIG_DIR) should be modified so
#    the 2nd line has the shef directory instead of the temp directory
# if archiving is enabled, the 2nd line in metar.cfg should have the temp directory listed instead of
#    the shef directory.  This script will then copy the files from the temp directory to:
#    /data/fxa/ispan/hydro_adbs/
#


# This allows you to run this script from outside of ./standard/bin
RUN_FROM_DIR=`dirname $0`

# set up SOME environment variables for WHFS applications
. $RUN_FROM_DIR/../../set_hydro_env
export METAR_OUTPUT_DIR=$(get_apps_defaults metar_output_dir)
export ARCHIVE_ENABLE=$(get_apps_defaults archive_enable)
export ARCHIVE_SHEFDATA_DIR=$(get_apps_defaults archive_shefdata_dir)
export HYDRO_PUBLICBIN=$(get_apps_defaults hydro_publicbin)
export SHEF_DATA_DIR=$(get_apps_defaults shef_data_dir)
export METAR2SHEF_OPTIONS=$(get_apps_defaults metar2shef_options)
export METAR_LOG_DIR=$(get_apps_defaults metar_log_dir)
export METAR_CONFIG_DIR=$(get_apps_defaults metar_config_dir)
export WHFS_BIN_DIR=$(get_apps_defaults whfs_bin_dir)



# setup log output file names
#
fnm=$METAR_LOG_DIR/metar2shef.log
tmp=$METAR_LOG_DIR/metar2shef.tmp

#----------------------------------------------------------------------
#  Don't start another instance of this script if one is currently running
#

AMIRUNNING_DIR=$METAR_LOG_DIR

. $HYDRO_PUBLICBIN/amirunning

if [[ $AmIRunning = "yes" ]]; then
  Dte=`date -u`
  echo run_metar2shef aborted at $Dte due to other instance running >> $fnm
  exit 1
fi

#----------------------------------------------------------------------

# save only the latest events in the log file
#
tail -1200 $fnm > $tmp
mv $tmp $fnm

# echo the current time
#
echo "-------------------------------------------------- " >> $fnm
Dte=`date -u`
echo "Running metar2shef"$OS_SUFFIX " version OB8.1 (03/26/2007) at:   " $Dte >> $fnm

# now run the application
# -a strip 1st char off of id
# -b accept collectives
# -fcfg config filename
# -p1, -p6, -p24 account for non-reporting 0 precip
# -round round the non-special times to nearest hour
# -w generate WMO header
# -strip convert bad ascii characters to blanks
# -q1 express wind direction in degrees, not tens of degrees
#
$WHFS_BIN_DIR/metar2shef$OS_SUFFIX \
 -fcfg $METAR_CONFIG_DIR/metar.cfg $METAR2SHEF_OPTIONS \
  >> $fnm 2>>$fnm

#
# Checks to see if archiving is enabled.  If it is enabled, then this script will copy
#   the files from the temp directory to the archive directory as well as the shef directory
#

num_files=`ls -1F $METAR_OUTPUT_DIR | grep -v "/" | wc -l`   # Checks to see if the directory 
                                                             # is empty.  If it is, then no 
                                                             # copy/move command will be issued
if (( $num_files > 0 ))
then
  for metarfile in `ls -1F $METAR_OUTPUT_DIR | grep -v "/"` 
  do
    if [ "$ARCHIVE_ENABLE" = "ON" ]          # Checks to see if archiving is enabled.  The token 
                                             # for this is located in .Apps_defaults_site
    then
      cp -f $METAR_OUTPUT_DIR/$metarfile $ARCHIVE_SHEFDATA_DIR
      mv -f $METAR_OUTPUT_DIR/$metarfile $SHEF_DATA_DIR
    else
      mv -f $METAR_OUTPUT_DIR/$metarfile $SHEF_DATA_DIR
    fi
  done
fi
#
#
Dte=`date -u `
echo "Completed metar2shef"$OS_SUFFIX "at: " $Dte >> $fnm
