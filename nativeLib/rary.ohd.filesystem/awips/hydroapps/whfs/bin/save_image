#!/usr/bin/ksh
#
# save_image
#
# Bryon Lawrence         September 26, 2001          OHD
#
# Purpose:
#
#    This script will capture an image on the screen and save it.
#    It was designed to be called from a program such as
#    timeseries or hydromap which provides the option of
#    capturing an image on the screen and storing it in a file.
#    The commands that must be called to do this are different on the
#    HP-UX and Linux operating systems.  So, this script has the logic
#    built into it to determine which operating system it is being run
#    on.
#
#    The caller of this script must provide two arguments: the name of the
#    window to be "captured" and the name of the file (including the
#    full path) to save the image to.  Note that the extension of the 
#    filename must reflect the desired image format.  For example if the
#    user wants to capture a window named "test window" and save it as a
#    GIF image in his home directory, then he should use the following
#    command structure:
#
#       save_image "test window" "~/test_window.gif"
#
#    If the user does not supply an extension identifying the image format,
#    then an extension of ".gif" is appended onto the filename, and the file
#    is saved as a gif image.
#
###############################################################################

TEMP_DIR="/tmp"

#
# Trap any malicious signals and make sure the temporary file needed 
# by the HP-UX operating system is cleaned up before the program 
# terminates.
trap 'rm -f ; rm -f $TEMP_DIR/junk.gif; exit 1' 1 2 15

# Test to make certain that the proper number of command line parameters 
# have been passed into this script.
if [[ $# -ne 2 ]]
then

   print "\nThe attempt to save the image has failed."
   print "An incorrect number of arguments have been passed to the"
   print "save_image script.  An argument specifying the name of"
   print "window to save and an argument specifiying the name of"
   print "the file to save it to must be supplied to this script.\n"
   exit 1

fi

WINDOW_NAME=$1
FILENAME=$2

# Determine if an extension was included on the filename.  If no 
# extension was provided, then the image format of the file
# will default to "*.gif".  The test for an extension is simple.
# Check to determine if there is a "." in the filename.  If so, then
# assume there is an extension. If not, then there is no extension, and
# a ".gif" will be appended to the filename.  If an extension specifying
# an image file format is supplied, then it is up to the user to make sure 
# that the extension and the image format that it represents are valid.
echo $FILENAME | grep "\."

if [ $? -ne 0 ]
then
   FILENAME="$FILENAME.gif"
fi

# Determine the operating system that this script is running on.
OPER_SYSTEM=`uname`

if [[ $OPER_SYSTEM = "Linux" ]]
then

   # This is the Linux sequence of commands.
   import -window "$WINDOW_NAME" $FILENAME

else

   # This is the HP-UX sequence of commands.
   rm -f $TEMP_DIR/junk.xwd
   xwd -name "$WINDOW_NAME" -out "$TEMP_DIR/junk.xwd"

   if [[ -z "$HYDRO_PUBLICBIN" ]]
   then
      imconv "$TEMP_DIR/junk.xwd" "$FILENAME"
   else
      ${HYDRO_PUBLICBIN}/imconv "$TEMP_DIR/junk.xwd" -gif "$FILENAME"
   fi

   rm -f $TEMP_DIR/junk.xwd
fi

exit 0
